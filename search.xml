<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/20/%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2020/11/20/%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start-hamapi-huasongyuan"><a href="#Quick-Start-hamapi-huasongyuan" class="headerlink" title="Quick Start hamapi huasongyuan"></a>Quick Start hamapi huasongyuan</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> LeetCode </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="2020/11/17/javaweb/"/>
      <url>2020/11/17/javaweb/</url>
      
        <content type="html"><![CDATA[<p>#javaweb</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="JavaScript基础概念"><a href="#JavaScript基础概念" class="headerlink" title="JavaScript基础概念"></a>JavaScript基础概念</h3><p>Javascript 语言诞生主要是完成页面的数据验证。 因此它运行在客户端， 需要运行浏览器来解析执行 JavaScript 代码。</p><h3 id="JavaScript里面的特殊的值"><a href="#JavaScript里面的特殊的值" class="headerlink" title="JavaScript里面的特殊的值"></a>JavaScript里面的特殊的值</h3><p>JavaScript里特殊的值：<br>undefined: 未定义，所有js变量未赋于初始值的时候，默认值都undefined。<br>null:              空值<br>NaN: 全称是：NotaNumber。非数字。非数值。</p><h3 id="关系比较"><a href="#关系比较" class="headerlink" title="关系比较"></a>关系比较</h3><p>等于：   == 等于是简单的做字面值的比较<br>全等于： === 除了做字面值的比较之外， 还会比较两个变量的数据类型</p><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>且运算： &amp;&amp;<br>或运算： ||<br>取反运算： !  </p><p>/*<br>&amp;&amp; 且运算。<br>有两种情况：<br>第一种： 当表达式全为真的时候。 返回最后一个表达式的值。<br>第二种： 当表达式中， 有一个为假的时候。 返回第一个为假的表达式的值<br>|| 或运算<br>第一种情况： 当表达式全为假时， 返回最后一个表达式的值<br>第二种情况： 只要有一个表达式为真。 就会把回第一个为真的表达式的值<br>并且 &amp;&amp; 与运算 和 ||或运算 有短路。<br>短路就是说，当这个&amp;&amp;或||运算有结果了之后。后面的表达式不再执行<br>*/</p><p>&amp;&amp; 且运算。<br>有两种情况：<br>第一种： 当表达式全为真的时候。 返回最后一个表达式的值。<br>第二种： 当表达式中， 有一个为假的时候。 返回第一个为假的表达式的值*/<br>var a = “abc”;<br>var b = true;<br>var d = false;<br>var c = null;<br>// alert( a &amp;&amp; b );//true<br>// alert( b &amp;&amp; a );//true<br>// alert( a &amp;&amp; d ); // false<br>// alert( a &amp;&amp; c ); // null<br>/* || 或运算<br>第一种情况： 当表达式全为假时， 返回最后一个表达式的值<br>第二种情况： 只要有一个表达式为真。 就会把回第一个为真的表达式的值*/<br>// alert( d || c ); // null<br>// alert( c|| d ); //false<br>// alert( a || c ); //abc<br>// alert( b || c ); //true  </p><h3 id="js中的事件"><a href="#js中的事件" class="headerlink" title="js中的事件"></a>js中的事件</h3><p>onload 加载完成事件： 页面加载完成之后， 常用于做页面 js 代码初始化操作<br>onclick 单击事件： 常用于按钮的点击响应操作。<br>onblur 失去焦点事件： 常用用于输入框失去焦点后验证其输入内容是否合法。<br>onchange 内容发生改变事件： 常用于下拉列表和输入框内容发生改变后操作<br>onsubmit 表单提交事件： 常用于表单提交前， 验证所有表单项是否合法。 </p><h2 id="Dom模型"><a href="#Dom模型" class="headerlink" title="Dom模型"></a>Dom模型</h2><p>DOM 全称是Document ObjectModel文档对象模型<br>就是把文档中的标签。属性文本转换成对象来管理。</p><h3 id="用户名的校验"><a href="#用户名的校验" class="headerlink" title="用户名的校验"></a>用户名的校验</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;xiaoyan&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        &#x2F;*</span><br><span class="line">         * 需求：当用户点击了较验按钮，要获取输出框中的内容。然后验证其是否合法。&lt;br&#x2F;&gt;</span><br><span class="line">         * 验证的规则是：必须由字母，数字。下划线组成。并且长度是5到12位。</span><br><span class="line">         * *&#x2F;</span><br><span class="line">        function onclickFun()&#123;</span><br><span class="line">            &#x2F;&#x2F; 1 当我们要操作一个标签的时候，一定要先获取这个标签对象。</span><br><span class="line">            var usernameObh&#x3D;document.getElementById(&quot;username&quot;);</span><br><span class="line">            &#x2F;&#x2F; [object HTMLInputElement] 它就是dom对象</span><br><span class="line">            var userText&#x3D;usernameObh.value;</span><br><span class="line">            var patt &#x3D; &#x2F;^\w&#123;5,12&#125;$&#x2F;;</span><br><span class="line">            &#x2F;*</span><br><span class="line">            *  test()方法用于测试某个字符串，是不是匹配我的规则 ，</span><br><span class="line">            *  匹配就返回true。不匹配就返回false.</span><br><span class="line">            * *&#x2F;</span><br><span class="line">            if(patt.test(userText))&#123;</span><br><span class="line">                alert(&quot;合法&quot;);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                alert(&quot;不合法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    用户名:&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button onclick&#x3D;&quot;onclickFun()&quot;&gt;校验&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></code></pre><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;用户名校验&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        function oneClickFun()&#123;</span><br><span class="line">        &#x2F;&#x2F; 1 当我们要操作一个标签的时候，一定要先获取这个标签对象。</span><br><span class="line">        var usernameobj&#x3D; document.getElementById(&quot;username01&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        var userText&#x3D;usernameobj.value;</span><br><span class="line">        &#x2F;&#x2F;正则表达式</span><br><span class="line">            var usernameHtm&#x3D;document.getElementById(&quot;usernameSpan&quot;);</span><br><span class="line"></span><br><span class="line">        var patt &#x3D; &#x2F;^\w&#123;5,12&#125;$&#x2F;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if(patt.test(userText))&#123;</span><br><span class="line">            usernameHtm.innerHTML &#x3D; &quot;&lt;img src&#x3D;\&quot;right.png\&quot; width&#x3D;\&quot;18\&quot; height&#x3D;\&quot;18\&quot;&gt; 用户名输入合法&quot;;</span><br><span class="line">            alert(&quot;用户名输入合法&quot;);</span><br><span class="line">        &#125;else</span><br><span class="line">        &#123;</span><br><span class="line">            usernameHtm.innerHTML &#x3D; &quot;&lt;img src&#x3D;\&quot;wrong.png\&quot; width&#x3D;\&quot;18\&quot; height&#x3D;\&quot;18\&quot;&gt;&quot;;</span><br><span class="line">            alert(&quot;用户名输入不合法&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    用户名:&lt;input type&#x3D;&quot;text&quot;  id&#x3D;&quot;username01&quot;&gt;</span><br><span class="line">    &lt;span id&#x3D;&quot;usernameSpan&quot; style&#x3D;&quot;color: red;&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button onclick&#x3D;&quot;oneClickFun()&quot;&gt;校验&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></code></pre><p><img src="https://i.loli.net/2020/11/12/IWeJtalZwCgP6M4.png" alt="1605181953_1_.png"></p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>jsp的全换是java server pages。 Java的服务器页面。  </p><p>jsp的主要作用是代替Servlet程序回传html页面的数据。  </p><p>因为Servlet程序回传html页面数据是一件非常繁锁的事情。开发成本和维护成本都极高。</p><h3 id="JSP的本质"><a href="#JSP的本质" class="headerlink" title="JSP的本质"></a>JSP的本质</h3><p>JSP页面本质上是一个Servlet程序</p><p>当我们第一次访问jsp页面的时候。 Tomcat服务器会帮我们把jsp页面翻译成为一个java源文件。 并且对它进行编译成为.class字节码程序。</p><h3 id="JSP的三种语法"><a href="#JSP的三种语法" class="headerlink" title="JSP的三种语法"></a>JSP的三种语法</h3><h4 id="JSP的头部page指令"><a href="#JSP的头部page指令" class="headerlink" title="JSP的头部page指令"></a>JSP的头部page指令</h4><p><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</code></p><p>1.language属性表示jsp翻译后是什么语言文件。暂时只支持java。<br>2. contentType属性表示jsp返回的数据类型是什么。也是源码中response.setContentType()参数值。<br>3.pageEncoding属性表示当前jsp页面文件本身的字符集。<br>4.import属性跟java源代码中一样。用于导包,导类。<br>5.autoFlush属性设置当out输出流缓冲区满了之后，是否自动刷新冲级区。默认值是true。<br>6.buffer属性设置out缓冲区的大小。默认是8kb。<br>7.errorPage属性设置当jsp页面运行时出错,自动跳转去的错误页面路径。<br>8.isErrorPage属性设置当前jsp页面是否是错误信息页面。默认是false。如果是true可以获取异常信息。<br>9.session属性设置访问当前jsp页面，是否会创建HttpSession对象。默认是true。<br>10.extends属性设置jsp翻译出来的java类默认继承谁。</p><h4 id="JSP的常用脚本"><a href="#JSP的常用脚本" class="headerlink" title="JSP的常用脚本"></a>JSP的常用脚本</h4><h5 id="声明脚本"><a href="#声明脚本" class="headerlink" title="声明脚本"></a>声明脚本</h5><p>声明脚本的格式是： <code>&lt;%! 声明 java 代码 %&gt;</code></p><p>1、 声明类属性<br>2、 声明 static 静态代码块<br>3、 声明类方法<br>4、 声明内部类  </p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--1、 声明类属性--%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">private Integer id;</span><br><span class="line">private String name;</span><br><span class="line">private static Map&lt;String,Object&gt; map;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--2、 声明 static 静态代码块--%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">static &#123;</span><br><span class="line">map &#x3D; new HashMap&lt;String,Object&gt;();</span><br><span class="line">map.put(&quot;key1&quot;, &quot;value1&quot;);</span><br><span class="line">map.put(&quot;key2&quot;, &quot;value2&quot;);</span><br><span class="line">map.put(&quot;key3&quot;, &quot;value3&quot;);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--3、 声明类方法--%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">public int abc()&#123;</span><br><span class="line">return 12;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;&lt;%--4、 声明内部类--%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">public static class A &#123;</span><br><span class="line">private Integer id &#x3D; 12;</span><br><span class="line">private String abc &#x3D; &quot;abc&quot;;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></code></pre><h5 id="表达式脚本"><a href="#表达式脚本" class="headerlink" title="表达式脚本"></a>表达式脚本</h5><p>表达式脚本的格式是： &lt;%=表达式%&gt;<br>表达式脚本的作用是： 的 jsp 页面上输出数据。<br>表达式脚本的特点：<br>1、所有的表达式脚本都会被翻译到<code>_jspService()</code>方法中<br>2、表达式脚本都会被翻译成为<code>out.print()</code>输出到页面上<br>3、由于表达式脚本翻译的内容都在<code>_jspService()</code>方法中,所以<code>_jspService()</code>方法中的对象都可以直接使用。<br>4、表达式脚本中的表达式不能以分号结束  </p><ol><li>输出整型  </li><li>输出浮点型   </li><li>输出字符串  </li><li>输出对象   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%&#x3D;12 %&gt; &lt;br&gt;  </span><br><span class="line">&lt;%&#x3D;12.12 %&gt; &lt;br&gt;  </span><br><span class="line">&lt;%&#x3D;&quot;我是字符串&quot; %&gt; &lt;br&gt;  </span><br><span class="line">&lt;%&#x3D;map%&gt; &lt;br&gt;  </span><br><span class="line">&lt;%&#x3D;request.getParameter(&quot;username&quot;)%&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="代码脚本"><a href="#代码脚本" class="headerlink" title="代码脚本"></a>代码脚本</h5><p>代码脚本的格式是：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">java 语句</span><br><span class="line">%&gt;&#96;&#96;&#96;  </span><br><span class="line">代码脚本的作用是：可以在jsp页面中，编写我们自己需要的功能（写的是java语句）。</span><br><span class="line"></span><br><span class="line">代码脚本的特点是：  </span><br><span class="line">1、 代码脚本翻译之后都在&#96;&#96;&#96;_jspService&#96;&#96;&#96;方法中。  </span><br><span class="line">2、 代码脚本由于翻译到&#96;&#96;&#96;_jspService()&#96;&#96;&#96;方法中，所以在&#96;&#96;&#96;_jspService()&#96;&#96;&#96;方法中的现有对象都可以直接使用。  </span><br><span class="line">3、 还可以由多个代码脚本块组合完成一个完整的java语句。  </span><br><span class="line">4、 代码脚本还可以和表达式脚本一起组合使用，在jsp页面上输出数据。  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### JSP九大内置对象</span><br><span class="line"></span><br><span class="line">jsp中的内置对象，是指Tomcat在翻译jsp页面成为Servlet源代码后，内部提供的九大对象，叫内置对象。</span><br><span class="line">![1605953612_1_.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;11&#x2F;21&#x2F;d7pKekfo6lZcC92.png)</span><br><span class="line"></span><br><span class="line">### JSP四大域对象</span><br><span class="line">pageContext (PageContextImpl 类) 当前 jsp 页面范围内有效  </span><br><span class="line">request (HttpServletRequest 类)、 一次请求内有效  </span><br><span class="line">session (HttpSession 类)、 一个会话范围内有效（打开浏览器访问服务器， 直到关闭浏览器）  </span><br><span class="line">application (ServletContext 类) 整个 web 工程范围内都有效（只要 web 工程不停止， 数据都在）  </span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    &lt;%–<br>      Created by IntelliJ IDEA.<br>      User: vankood<br>      Date: 2020/11/21<br>      Time: 20:07<br>      To change this template use File | Settings | File Templates.<br>    –%&gt;<br>    &lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;<br>    <html><br>    <head><br>        <title>scope.jsp页面</title></p><pre><code>&lt;/head&gt;&lt;body&gt;&lt;%    // 往四个域中都分别保存了数据    pageContext.setAttribute(&quot;key&quot;, &quot;pageContext&quot;);    request.setAttribute(&quot;key&quot;, &quot;request&quot;);    session.setAttribute(&quot;key&quot;, &quot;session&quot;);    application.setAttribute(&quot;key&quot;, &quot;application&quot;);%&gt;pageContext域是否有值：&lt;%=pageContext.getAttribute(&quot;key&quot;)%&gt; &lt;br&gt;request域是否有值：&lt;%=request.getAttribute(&quot;key&quot;)%&gt; &lt;br&gt;session域是否有值：&lt;%=session.getAttribute(&quot;key&quot;)%&gt; &lt;br&gt;application域是否有值：&lt;%=application.getAttribute(&quot;key&quot;)%&gt; &lt;br&gt;&lt;%    request.getRequestDispatcher(&quot;/scope2.jsp&quot;).forward(request,response);%&gt;&lt;/body&gt;&lt;/html&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">域对象是可以像 Map 一样存取数据的对象。 四个域对象功能一样。 不同的是它们对数据的存取范围。  </span><br><span class="line">虽然四个域对象都可以存取数据。 在使用上它们是有优先顺序的。  </span><br><span class="line">四个域在使用的时候， 优先顺序分别是， 他们从小到大的范围的顺序。  </span><br><span class="line">pageContext &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt; request &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt; session &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt; application  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### out 输出和 response.getWriter 输出的区别</span><br><span class="line"></span><br><span class="line">![图片.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;11&#x2F;21&#x2F;bqsFJvtpSyfBY9x.png)</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;%--  Created by IntelliJ IDEA.  User: vankood  Date: 2020/11/21  Time: 20:55  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;        &lt;%            out.write(&quot;write输出1&lt;br/&gt;&quot;);            out.print(&quot;print输出1&lt;br/&gt;&quot;);            out.flush();            out.print(&quot;print输出2&lt;br/&gt;&quot;);            out.write(&quot;write输出2&lt;br/&gt;&quot;);            response.getWriter().write(&quot;response输出1 &lt;br&gt;&quot;);            response.getWriter().write(&quot;response输出2 &lt;br&gt;&quot;);        %&gt;&lt;/body&gt;&lt;/html&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![图片.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;11&#x2F;21&#x2F;LV32rzQKRkG6ITZ.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### JSP的常用标签</span><br><span class="line"></span><br><span class="line">#### jsp静态包含</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;%--&lt;%@ include file=&quot;&quot;%&gt; 就是静态包含file 属性指定你要包含的 jsp 页面的路径地址中第一个斜杠 / 表示为 http://ip:port/工程路径/ 映射到代码的 web 目录静态包含的特点：1、 静态包含不会翻译被包含的 jsp 页面。2、 静态包含其实是把被包含的 jsp 页面的代码拷贝到包含的位置执行输出。--%&gt;&lt;%@ include file=&quot;/include/footer.jsp&quot;%&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### jsp动态包含</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;%--&lt;jsp:include page=&quot;&quot;&gt;&lt;/jsp:include&gt; 这是动态包含page 属性是指定你要包含的 jsp 页面的路径动态包含也可以像静态包含一样。 把被包含的内容执行输出到包含位置动态包含的特点：1、 动态包含会把包含的 jsp 页面也翻译成为 java 代码2、 动态包含底层代码使用如下代码去调用被包含的 jsp 页面执行输出。JspRuntimeLibrary.include(request, response, &quot;/include/footer.jsp&quot;, out, false);3、 动态包含， 还可以传递参数--%&gt;&lt;jsp:include page=&quot;/include/footer.jsp&quot;&gt;&lt;jsp:param name=&quot;username&quot; value=&quot;bbj&quot;/&gt;&lt;jsp:param name=&quot;password&quot; value=&quot;root&quot;/&gt;&lt;/jsp:include&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##### 动态包含代码</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;%--  Created by IntelliJ IDEA.  User: vankood  Date: 2020/11/21  Time: 21:08  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;静态包含和动态包含&lt;/title&gt;&lt;/head&gt;&lt;body&gt;   头部信息1&lt;br&gt;   主题信息&lt;br&gt;   &lt;jsp:include page=&quot;footer.jsp&quot;&gt;       &lt;jsp:param name=&quot;username&quot; value=&quot;bbj&quot;/&gt;       &lt;jsp:param name=&quot;password&quot; value=&quot;root&quot;/&gt;   &lt;/jsp:include&gt;&lt;/body&gt;&lt;/html&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">footer 代码</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;%--  Created by IntelliJ IDEA.  User: vankood  Date: 2020/11/21  Time: 21:09  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;脚页信息&lt;/title&gt;&lt;/head&gt;&lt;body&gt;        页脚信息&lt;br&gt;        密码信息:&lt;%=request.getParameter(&quot;password&quot;)%&gt;&lt;/body&gt;&lt;/html&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 标签转发</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;%--&lt;jsp:forward page=&quot;&quot;&gt;&lt;/jsp:forward&gt; 是请求转发标签， 它的功能就是请求转发page 属性设置请求转发的路径--%&gt;&lt;jsp:forward page=&quot;/scope2.jsp&quot;&gt;&lt;/jsp:forward&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## EL表达式</span><br><span class="line"></span><br><span class="line">EL表达式的全称是：Expression Language。是表达式语言。  </span><br><span class="line">EL表达式的什么作用： EL 表达式主要是代替 jsp 页面中的表达式脚本在 jsp 页面中进行数据的输出。  </span><br><span class="line">因为EL表达式在输出数据的时候，要比jsp的表达式脚本要简洁很多 </span><br><span class="line"></span><br><span class="line">### EL 表达式搜索域数据的顺序</span><br><span class="line"></span><br><span class="line">EL表达式主要是在jsp页面中输出数据。  </span><br><span class="line">主要是输出域对象中的数据。</span><br><span class="line">当四个域中都有相同的key的数据的时候，EL表达式会按照四个域的从小到大的顺序去进行搜索， 找到就输出。   </span><br><span class="line"></span><br><span class="line">### EL表达式输出属性</span><br><span class="line"></span><br></pre></td></tr></table></figure>&lt;%@ page import=&quot;pojo.Person&quot; %&gt;&lt;%@ page import=&quot;java.util.List&quot; %&gt;&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;&lt;%@ page import=&quot;java.util.Map&quot; %&gt;&lt;%@ page import=&quot;java.util.HashMap&quot; %&gt;&lt;%--  Created by IntelliJ IDEA.  User: vankood  Date: 2020/11/22  Time: 21:27  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%    Person p1=new Person();    p1.setName(&quot;vankood&quot;);    p1.setPhones(new String[]&#123;&quot;18610541354&quot;,&quot;18688886666&quot;,&quot;18699998888&quot;&#125;);    List&lt;String&gt; cities = new ArrayList&lt;&gt;();    cities.add(&quot;北京&quot;);    cities.add(&quot;上海&quot;);    cities.add(&quot;深圳&quot;);    p1.setCities(cities);    Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();    map.put(&quot;key1&quot;,&quot;value1&quot;);    map.put(&quot;key2&quot;,&quot;value2&quot;);    map.put(&quot;key3&quot;,&quot;value3&quot;);    p1.setMap(map);    pageContext.setAttribute(&quot;bala&quot;, p1);%&gt;    输出Person：$&#123; bala &#125;&lt;br/&gt;    输出Person的name数组属性值：$&#123;bala.name&#125;&lt;br/&gt;    输出Person的cities集合中的元素值：$&#123;bala.cities&#125;&lt;br/&gt;    输出Person的List集合中个别元素值： $&#123;bala.cities[2]&#125;&lt;br/&gt;    输出Person的Map集合:$&#123;bala.map&#125;&lt;br/&gt;    输出Person的Map集合中某个key的值: $&#123;bala.map.key2&#125;&lt;br&gt;    输出Person的age属性： $&#123;bala.age&#125;&lt;br&gt;&lt;/body&gt;&lt;/html&gt;    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![图片.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;11&#x2F;22&#x2F;teC45APJfUXoSTN.png)</span><br><span class="line"></span><br><span class="line">### 关系表达式</span><br><span class="line"></span><br><span class="line">![1606055368_1_.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;11&#x2F;22&#x2F;5CDeL3NHwJhzRQm.png)</span><br><span class="line"></span><br><span class="line">### 逻辑运算</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![1606055385_1_.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;11&#x2F;22&#x2F;Dviy2nkG64BNsZj.png)</span><br><span class="line"></span><br><span class="line">### 算数运算</span><br><span class="line"></span><br><span class="line">![1606055409_1_.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;11&#x2F;22&#x2F;cdKUbhvnu93qiBw.png)</span><br><span class="line"></span><br><span class="line">### 判断是否为空</span><br><span class="line"></span><br><span class="line">empty 运算可以判断一个数据是否为空， 如果为空， 则输出 true,不为空输出 false。</span><br><span class="line">以下几种情况为空：  </span><br><span class="line">1、 值为 null 值的时候， 为空  </span><br><span class="line">2、 值为空串的时候， 为空  </span><br><span class="line">3、 值是 Object 类型数组， 长度为零的时候  </span><br><span class="line">4、 list 集合， 元素个数为零  </span><br><span class="line">5、 map 集合， 元素个数为零  </span><br></pre></td></tr></table></figure>&lt;body&gt;&lt;%    //        1、值为null值的时候，为空    request.setAttribute(&quot;emptyNull&quot;, null);    //        2、值为空串的时候，为空    request.setAttribute(&quot;emptyStr&quot;, &quot;&quot;);    //        3、值是Object类型数组，长度为零的时候    request.setAttribute(&quot;emptyArr&quot;, new Object[]&#123;&#125;);    //        4、list集合，元素个数为零    List&lt;String&gt; list = new ArrayList&lt;&gt;();    //        list.add(&quot;abc&quot;);    request.setAttribute(&quot;emptyList&quot;, list);    //        5、map集合，元素个数为零    Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();    //        map.put(&quot;key1&quot;, &quot;value1&quot;);    request.setAttribute(&quot;emptyMap&quot;, map);    %&gt;    $&#123; empty emptyNull &#125; &lt;br/&gt;    $&#123; empty emptyStr &#125; &lt;br/&gt;    $&#123; empty emptyArr &#125; &lt;br/&gt;    $&#123; empty emptyList &#125; &lt;br/&gt;    $&#123; empty emptyMap &#125; &lt;br/&gt;&lt;/body&gt;```</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂七杂八</title>
      <link href="2020/11/16/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%8D%81%E5%A4%A7%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/"/>
      <url>2020/11/16/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%8D%81%E5%A4%A7%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h1 id="数据结构总结的一些基本算法"><a href="#数据结构总结的一些基本算法" class="headerlink" title="数据结构总结的一些基本算法"></a>数据结构总结的一些基本算法</h1><h2 id="二分查找-非递归"><a href="#二分查找-非递归" class="headerlink" title="二分查找(非递归)"></a>二分查找(非递归)</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p><img src="https://i.loli.net/2020/11/16/SejElxkoRscTB2Y.png" alt="1605527676_1_.png"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 二分查找 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr=&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">int</span> target=sc.nextInt();</span><br><span class="line">           <span class="keyword">int</span> s= binarySearch(arr, target);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//二分查找的非递归实现</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 待查找的数组, arr是升序排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 需要查找的数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回对应下标，-1表示没有找到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=arr.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (target == arr[mid]) &#123;</span><br><span class="line">                n++;</span><br><span class="line">                <span class="keyword">return</span> n;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">                n++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">                n++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><img src="https://i.loli.net/2020/11/16/8IJQRoGa49xgvrT.png" alt="1605527914_1_.png"></p><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><p><img src="https://i.loli.net/2020/11/16/g7xQHv9wCperYaO.png" alt="1605528099_1_.png"><br><img src="https://i.loli.net/2020/11/16/8VoWFG67dgwI9Cb.png" alt="1605528164_1_.png"></p><h3 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 汉诺塔 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        hannuota(<span class="number">3</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//汉诺塔的移动的方法</span></span><br><span class="line">        <span class="comment">//使用分治算法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;共执行了&quot;</span>+count+<span class="string">&quot;次&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hannuota</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">char</span> a,<span class="keyword">char</span> b,<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果只有一个盘子</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;第1个盘从&quot;</span> + a + <span class="string">&quot;到&quot;</span> + c+<span class="string">&quot;  &quot;</span>+ (++count)+<span class="string">&quot;次&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果我们有 n &gt;= 2 情况，我们总是可以看做是两个盘 1.最下边的一个盘 2. 上面的所有盘</span></span><br><span class="line">        <span class="comment">//1. 先把 最上面的所有盘 A-&gt;B， 移动过程会使用到 c</span></span><br><span class="line">        hannuota(num - <span class="number">1</span>, a, c, b);</span><br><span class="line">        <span class="comment">//2. 把最下边的盘 A-&gt;C</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span> + num + <span class="string">&quot;个盘从&quot;</span> + a + <span class="string">&quot;到&quot;</span> + c+<span class="string">&quot; &quot;</span>+(++count)+<span class="string">&quot;次&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 把B塔的所有盘 从 B-&gt;C , 移动过程使用到 a塔  </span></span><br><span class="line">        hannuota(num - <span class="number">1</span>, b, a, c);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h2 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h2><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><p><img src="https://i.loli.net/2020/11/16/qKcgJn4HQTYvlts.png" alt="1605533065_1_.png"><br><img src="https://i.loli.net/2020/11/16/yXxZmTJ5vH2pqNc.png" alt="1605533096_1_.png"><br><img src="https://i.loli.net/2020/11/16/EBTy5cIulkPV4wg.png" alt="1605533119_1_.png"></p><h2 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h2><h3 id="暴力匹配"><a href="#暴力匹配" class="headerlink" title="暴力匹配"></a>暴力匹配</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViolenceMatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//测试暴力匹配算法</span></span><br><span class="line">String str1 = <span class="string">&quot;abddfda&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;fa&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> index = violenceMatch(str1, str2);</span><br><span class="line">System.out.println(<span class="string">&quot;index=&quot;</span> + index);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力匹配算法实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">violenceMatch</span><span class="params">(String str1, String str2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>[] s1 = str1.toCharArray();</span><br><span class="line"><span class="keyword">char</span>[] s2 = str2.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s1Len = s1.length;</span><br><span class="line"><span class="keyword">int</span> s2Len = s2.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// i索引指向s1</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>; <span class="comment">// j索引指向s2</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; s1Len &amp;&amp; j &lt; s2Len) &#123;<span class="comment">// 保证匹配时，不越界</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(s1[i] == s2[j]) &#123;<span class="comment">//匹配ok</span></span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//没有匹配成功</span></span><br><span class="line"><span class="comment">//如果失配（即str1[i]! = str2[j]），令i = i - (j - 1)，j = 0。</span></span><br><span class="line">i = i - (j - <span class="number">1</span>);</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否匹配成功</span></span><br><span class="line"><span class="keyword">if</span>(j == s2Len) &#123;</span><br><span class="line"><span class="keyword">return</span> i - j;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h3 id="kmp算法"><a href="#kmp算法" class="headerlink" title="kmp算法"></a>kmp算法</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">public class KMPAlgorithm &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">String str1 &#x3D; &quot;BBC ABCDAB ABCDABCDABDE&quot;;</span><br><span class="line">String str2 &#x3D; &quot;ABCDABD&quot;;</span><br><span class="line">&#x2F;&#x2F;String str2 &#x3D; &quot;BBC&quot;;</span><br><span class="line"></span><br><span class="line">int[] next &#x3D; kmpNext(&quot;ABCDABD&quot;); &#x2F;&#x2F;[0, 1, 2, 0]</span><br><span class="line">System.out.println(&quot;next&#x3D;&quot; + Arrays.toString(next));</span><br><span class="line"></span><br><span class="line">int index &#x3D; kmpSearch(str1, str2, next);</span><br><span class="line">System.out.println(&quot;index&#x3D;&quot; + index); &#x2F;&#x2F; 15了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;写出我们的kmp搜索算法</span><br><span class="line">&#x2F;**</span><br><span class="line"> * </span><br><span class="line"> * @param str1 源字符串</span><br><span class="line"> * @param str2 子串</span><br><span class="line"> * @param next 部分匹配表, 是子串对应的部分匹配表</span><br><span class="line"> * @return 如果是-1就是没有匹配到，否则返回第一个匹配的位置</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static int kmpSearch(String str1, String str2, int[] next) &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历 </span><br><span class="line">for(int i &#x3D; 0, j &#x3D; 0; i &lt; str1.length(); i++) &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;需要处理 str1.charAt(i) ！&#x3D; str2.charAt(j), 去调整j的大小</span><br><span class="line">&#x2F;&#x2F;KMP算法核心点, 可以验证...</span><br><span class="line">while( j &gt; 0 &amp;&amp; str1.charAt(i) !&#x3D; str2.charAt(j)) &#123;</span><br><span class="line">j &#x3D; next[j-1]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(str1.charAt(i) &#x3D;&#x3D; str2.charAt(j)) &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">if(j &#x3D;&#x3D; str2.length()) &#123;&#x2F;&#x2F;找到了 &#x2F;&#x2F; j &#x3D; 3 i </span><br><span class="line">return i - j + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return  -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取到一个字符串(子串) 的部分匹配值表</span><br><span class="line">public static  int[] kmpNext(String dest) &#123;</span><br><span class="line">&#x2F;&#x2F;创建一个next 数组保存部分匹配值</span><br><span class="line">int[] next &#x3D; new int[dest.length()];</span><br><span class="line">next[0] &#x3D; 0; &#x2F;&#x2F;如果字符串是长度为1 部分匹配值就是0</span><br><span class="line">for(int i &#x3D; 1, j &#x3D; 0; i &lt; dest.length(); i++) &#123;</span><br><span class="line">&#x2F;&#x2F;当dest.charAt(i) !&#x3D; dest.charAt(j) ，我们需要从next[j-1]获取新的j</span><br><span class="line">&#x2F;&#x2F;直到我们发现 有  dest.charAt(i) &#x3D;&#x3D; dest.charAt(j)成立才退出</span><br><span class="line">&#x2F;&#x2F;这时kmp算法的核心点</span><br><span class="line">while(j &gt; 0 &amp;&amp; dest.charAt(i) !&#x3D; dest.charAt(j)) &#123;</span><br><span class="line">j &#x3D; next[j-1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当dest.charAt(i) &#x3D;&#x3D; dest.charAt(j) 满足时，部分匹配值就是+1</span><br><span class="line">if(dest.charAt(i) &#x3D;&#x3D; dest.charAt(j)) &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">next[i] &#x3D; j;</span><br><span class="line">&#125;</span><br><span class="line">return next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2020/11/13/jQuery/"/>
      <url>2020/11/13/jQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#ID 选择器： 根据 id 查找标签对象  </span><br><span class="line">.class 选择器： 根据 class 查找标签对象  </span><br><span class="line">element 选择器： 根据标签名查找标签对象  </span><br><span class="line">* 选择器： 表示任意的， 所有的元素  </span><br><span class="line">selector1， selector2 组合选择器： 合并选择器 1， 选择器 2 的结果并返回</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;选择器&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        div, span, p &#123;</span><br><span class="line">            width: 140px;</span><br><span class="line">            height: 140px;</span><br><span class="line">            margin: 5px;</span><br><span class="line">            background: #aaa;</span><br><span class="line">            border: #000 1px solid;</span><br><span class="line">            float: left;</span><br><span class="line">            font-size: 17px;</span><br><span class="line">            font-family: Verdana;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div.mini &#123;</span><br><span class="line">            width: 55px;</span><br><span class="line">            height: 55px;</span><br><span class="line">            background-color: #aaa;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div.hide &#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;jquery-1.7.2.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            &#x2F;&#x2F;1.选择 id 为 one 的元素 &quot;background-color&quot;,&quot;#bbffaa&quot;</span><br><span class="line">            $(&quot;#btn1&quot;).click(function () &#123;</span><br><span class="line">                $(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            &#x2F;&#x2F;2.选择 class 为 mini 的所有元素</span><br><span class="line">            $(&quot;#btn2&quot;).click(function () &#123;</span><br><span class="line">               $(&quot;.mini&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;3.选择 元素名是 div 的所有元素</span><br><span class="line">            $(&quot;#btn3&quot;).click(function () &#123;</span><br><span class="line">                $(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;4.选择所有的元素</span><br><span class="line">            $(&quot;#btn4&quot;).click(function () &#123;</span><br><span class="line">                $(&quot;*&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;5.选择所有的 span 元素和id为two的元素</span><br><span class="line">            $(&quot;#btn5&quot;).click(function () &#123;</span><br><span class="line">                $(&quot;span,#two&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择 id 为 one 的元素&quot; id&#x3D;&quot;btn1&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择 class 为 mini 的所有元素&quot; id&#x3D;&quot;btn2&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择 元素名是 div 的所有元素&quot; id&#x3D;&quot;btn3&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择 所有的元素&quot; id&#x3D;&quot;btn4&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择 所有的 span 元素和id为two的元素&quot; id&#x3D;&quot;btn5&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;one&quot; id&#x3D;&quot;one&quot;&gt;</span><br><span class="line">            id 为 one,class 为 one 的div</span><br><span class="line">            &lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class&#x3D;&quot;one&quot; id&#x3D;&quot;two&quot; title&#x3D;&quot;test&quot;&gt;</span><br><span class="line">            id为two，class为one，title为test的div</span><br><span class="line">            &lt;div class&#x3D;&quot;mini&quot; title&#x3D;&quot;other&quot;&gt;class为mini,title为other&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;mini&quot; title&#x3D;&quot;test&quot;&gt;class为mini,title为test&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;one&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;mini&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;one&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;mini&quot; title&#x3D;&quot;tesst&quot;&gt;class为mini,title为tesst&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div style&#x3D;&quot;display:none;&quot; class&#x3D;&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            包含input的type为&quot;hidden&quot;的div&lt;input type&#x3D;&quot;hidden&quot; size&#x3D;&quot;8&quot;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;one&quot; id&#x3D;&quot;span&quot;&gt;^^span元素^^&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></code></pre><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><p>ancestor descendant 后代选择器 ： 在给定的祖先元素下匹配所有的后代元素<br>parent &gt; child 子元素选择器： 在给定的父元素下匹配所有的子元素<br>prev + next 相邻元素选择器： 匹配所有紧接在 prev 元素后的 next 元素<br>prev ~ sibings 之后的兄弟元素选择器： 匹配 prev 元素之后的所有 siblings 元素  </p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Untitled Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">div, span, p &#123;</span><br><span class="line">    width: 140px;</span><br><span class="line">    height: 140px;</span><br><span class="line">    margin: 5px;</span><br><span class="line">    background: #aaa;</span><br><span class="line">    border: #000 1px solid;</span><br><span class="line">    float: left;</span><br><span class="line">    font-size: 17px;</span><br><span class="line">    font-family: Verdana;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.mini &#123;</span><br><span class="line">    width: 55px;</span><br><span class="line">    height: 55px;</span><br><span class="line">    background-color: #aaa;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.hide &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;script&#x2F;jquery-1.7.2.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">&#x2F;&#x2F;1.选择 body 内的所有 div 元素</span><br><span class="line">$(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">$(&quot;body div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.在 body 内, 选择div子元素  </span><br><span class="line">$(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">$(&quot;body &gt; div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.选择 id 为 one 的下一个 div 元素 </span><br><span class="line">$(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#one+div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4.选择 id 为 two 的元素后面的所有 div 兄弟元素</span><br><span class="line">$(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#two~div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- &lt;div&gt;</span><br><span class="line">&lt;h1&gt;层级选择器:根据元素的层级关系选择元素&lt;&#x2F;h1&gt;</span><br><span class="line">ancestor descendant  ：</span><br><span class="line">parent &gt; child    ：</span><br><span class="line">prev + next    ：</span><br><span class="line">prev ~ siblings    ：</span><br><span class="line">&lt;&#x2F;div&gt; --&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择 body 内的所有 div 元素&quot; id&#x3D;&quot;btn1&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;在 body 内, 选择div子元素&quot; id&#x3D;&quot;btn2&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择 id 为 one 的下一个 div 元素&quot; id&#x3D;&quot;btn3&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择 id 为 two 的元素后面的所有 div 兄弟元素&quot; id&#x3D;&quot;btn4&quot; &#x2F;&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;one&quot; id&#x3D;&quot;one&quot;&gt;</span><br><span class="line">id 为 one,class 为 one 的div</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;one&quot; id&#x3D;&quot;two&quot; title&#x3D;&quot;test&quot;&gt;</span><br><span class="line">id为two,class为one,title为test的div</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot; title&#x3D;&quot;other&quot;&gt;class为mini,title为other&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot; title&#x3D;&quot;test&quot;&gt;class为mini,title为test&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;one&quot;&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;one&quot;&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot; title&#x3D;&quot;tesst&quot;&gt;class为mini,title为tesst&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div style&#x3D;&quot;display:none;&quot; class&#x3D;&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">包含input的type为&quot;hidden&quot;的div&lt;input type&#x3D;&quot;hidden&quot; size&#x3D;&quot;8&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;span id&#x3D;&quot;span&quot;&gt;^^span元素^^&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h1 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h1><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Untitled Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">div, span, p &#123;</span><br><span class="line">    width: 140px;</span><br><span class="line">    height: 140px;</span><br><span class="line">    margin: 5px;</span><br><span class="line">    background: #aaa;</span><br><span class="line">    border: #000 1px solid;</span><br><span class="line">    float: left;</span><br><span class="line">    font-size: 17px;</span><br><span class="line">    font-family: Verdana;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.mini &#123;</span><br><span class="line">    width: 55px;</span><br><span class="line">    height: 55px;</span><br><span class="line">    background-color: #aaa;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.hide &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;script&#x2F;jquery-1.7.2.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">function anmateIt()&#123;</span><br><span class="line">$(&quot;#mover&quot;).slideToggle(&quot;slow&quot;, anmateIt);</span><br><span class="line">&#125;</span><br><span class="line">anmateIt();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">&#x2F;&#x2F;1.选择第一个 div 元素  </span><br><span class="line">$(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:first&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.选择最后一个 div 元素</span><br><span class="line">$(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:last&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.选择class不为 one 的所有 div 元素</span><br><span class="line">$(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:not(.one)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4.选择索引值为偶数的 div 元素</span><br><span class="line">$(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:even&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;5.选择索引值为奇数的 div 元素</span><br><span class="line">$(&quot;#btn5&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:odd&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;6.选择索引值为大于 3 的 div 元素</span><br><span class="line">$(&quot;#btn6&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:gt(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;7.选择索引值为等于 3 的 div 元素</span><br><span class="line">$(&quot;#btn7&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:eq(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;8.选择索引值为小于 3 的 div 元素</span><br><span class="line">$(&quot;#btn8&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:lt(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;9.选择所有的标题元素</span><br><span class="line">$(&quot;#btn9&quot;).click(function()&#123;</span><br><span class="line">$(&quot;:header&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;10.选择当前正在执行动画的所有元素</span><br><span class="line">$(&quot;#btn10&quot;).click(function()&#123;</span><br><span class="line">$(&quot;:animated&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;11.选择没有执行动画的最后一个div</span><br><span class="line">$(&quot;#btn11&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:not(:animated):last&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择第一个 div 元素&quot; id&#x3D;&quot;btn1&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择最后一个 div 元素&quot; id&#x3D;&quot;btn2&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择class不为 one 的所有 div 元素&quot; id&#x3D;&quot;btn3&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择索引值为偶数的 div 元素&quot; id&#x3D;&quot;btn4&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择索引值为奇数的 div 元素&quot; id&#x3D;&quot;btn5&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择索引值为大于 3 的 div 元素&quot; id&#x3D;&quot;btn6&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择索引值为等于 3 的 div 元素&quot; id&#x3D;&quot;btn7&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择索引值为小于 3 的 div 元素&quot; id&#x3D;&quot;btn8&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择所有的标题元素&quot; id&#x3D;&quot;btn9&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择当前正在执行动画的所有元素&quot; id&#x3D;&quot;btn10&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;选择没有执行动画的最后一个div&quot; id&#x3D;&quot;btn11&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3&gt;基本选择器.&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;one&quot; id&#x3D;&quot;one&quot;&gt;</span><br><span class="line">id 为 one,class 为 one 的div</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;one&quot; id&#x3D;&quot;two&quot; title&#x3D;&quot;test&quot;&gt;</span><br><span class="line">id为two,class为one,title为test的div</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot; title&#x3D;&quot;other&quot;&gt;class为mini,title为other&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot; title&#x3D;&quot;test&quot;&gt;class为mini,title为test&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;one&quot;&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;one&quot;&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot;&gt;class为mini&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;mini&quot; title&#x3D;&quot;tesst&quot;&gt;class为mini,title为tesst&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div style&#x3D;&quot;display:none;&quot; class&#x3D;&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">包含input的type为&quot;hidden&quot;的div&lt;input type&#x3D;&quot;hidden&quot; size&#x3D;&quot;8&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;mover&quot;&gt;正在执行动画的div元素.&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h2 id="全选和全不选"><a href="#全选和全不选" class="headerlink" title="全选和全不选"></a>全选和全不选</h2><h2 id="Dom的增删改"><a href="#Dom的增删改" class="headerlink" title="Dom的增删改"></a>Dom的增删改</h2><h3 id="从左到右，-从右到左练习"><a href="#从左到右，-从右到左练习" class="headerlink" title="从左到右， 从右到左练习"></a>从左到右， 从右到左练习</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        select &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 140px;</span><br><span class="line">        &#125;</span><br><span class="line">        div &#123;</span><br><span class="line">              width: 130px;</span><br><span class="line">              float: left;</span><br><span class="line">              text-align: center;</span><br><span class="line">          &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;jquery-1.7.2.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">           $(&quot;#btn1&quot;).click(function () &#123;</span><br><span class="line">              $(&quot;#s1 option:selected&quot;).appendTo($(&quot;#s2&quot;)) ;</span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            $(&quot;#btn2&quot;).click(function () &#123;</span><br><span class="line">                $(&quot;#s1 option&quot;).appendTo($(&quot;#s2&quot;)) ;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $(&quot;#btn3&quot;).click(function () &#123;</span><br><span class="line">                $(&quot;#s2 option:selected&quot;).appendTo($(&quot;#s1&quot;)) ;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            $(&quot;#btn4&quot;).click(function () &#123;</span><br><span class="line">                $(&quot;#s2 option&quot;).appendTo($(&quot;#s1&quot;)) ;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;left&quot;&gt;</span><br><span class="line">    &lt;select multiple&#x3D;&quot;multiple&quot;   id&#x3D;&quot;s1&quot; name&#x3D;&quot;sel01&quot;&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;opt01&quot;&gt;选项 1&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;opt02&quot;&gt;选项 2&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;opt03&quot;&gt;选项 3&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;opt04&quot;&gt;选项 4&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;opt05&quot;&gt;选项 5&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;opt06&quot;&gt;选项 6&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;opt07&quot;&gt;选项 7&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;opt08&quot;&gt;选项 8&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button id&#x3D;&quot;btn1&quot;&gt;选中添加到右边&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button id&#x3D;&quot;btn2&quot;&gt;全部添加到右边&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;rigth&quot;&gt;</span><br><span class="line">    &lt;select multiple&#x3D;&quot;multiple&quot;  id&#x3D;&quot;s2&quot; name&#x3D;&quot;sel02&quot;&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;button id&#x3D;&quot;btn3&quot;&gt;选中删除到左边&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button id&#x3D;&quot;btn4&quot;&gt;全部删除到左边&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></code></pre><p><img src="https://i.loli.net/2020/11/15/Ki1PVgW2Scq4Ndx.png" alt="1605427260_1_.png"></p><h3 id="动态添加删除表格文件"><a href="#动态添加删除表格文件" class="headerlink" title="动态添加删除表格文件"></a>动态添加删除表格文件</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;动态增加删除表格记录&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;jquery-1.7.2.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            &#x2F;&#x2F;创建一个复用的函数</span><br><span class="line">            var del&#x3D;function () &#123;</span><br><span class="line">                var $trobj &#x3D;$(this).parent().parent();</span><br><span class="line">                var name &#x3D;$trobj.find(&quot;td:last&quot;).text();</span><br><span class="line">                &#x2F;**</span><br><span class="line">                 * confirm 是 JavaScript 语言提供的一个确认提示框函数。 你给它传什么， 它就提示什么&lt;br&#x2F;&gt;</span><br><span class="line">                 * 当用户点击了确定， 就返回 true。 当用户点击了取消， 就返回 false</span><br><span class="line">                 *&#x2F;</span><br><span class="line">                if(confirm(&quot;确认删除&quot;+name+&quot;吗&quot;))&#123;</span><br><span class="line">                    $trobj.remove();</span><br><span class="line">                &#125;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 创建一个行标签对象， 添加到显示数据的表格中</span><br><span class="line">            $(&quot;#addEmpButton&quot;).click(function () &#123;</span><br><span class="line">                var name&#x3D;$(&quot;#idName&quot;).val();</span><br><span class="line">                var email&#x3D;$(&quot;#idemail&quot;).val();</span><br><span class="line">                var salary&#x3D;$(&quot;#idsalary&quot;).val();</span><br><span class="line">                var $trObj &#x3D; $(&quot;&lt;tr&gt;&quot; +&quot;&lt;td&gt;&quot; + name + &quot;&lt;&#x2F;td&gt;&quot; +</span><br><span class="line">                    &quot;&lt;td&gt;&quot; + email + &quot;&lt;&#x2F;td&gt;&quot; +</span><br><span class="line">                    &quot;&lt;td&gt;&quot; + salary + &quot;&lt;&#x2F;td&gt;&quot; +</span><br><span class="line">                    &quot;&lt;td&gt;&lt;a href&#x3D;\&quot;deleteEmp?id&#x3D;002\&quot;&gt;Delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&quot; +</span><br><span class="line">                    &quot;&lt;&#x2F;tr&gt;&quot;);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;添加到显示数据中</span><br><span class="line">                $trObj.appendTo( $(&quot;#employeeTable&quot;) );</span><br><span class="line">                &#x2F;&#x2F; 给添加的行的 a 标签绑上事件</span><br><span class="line">                $trObj.find(&quot;a&quot;).click(del);</span><br><span class="line">            &#125;);</span><br><span class="line">            &#x2F;&#x2F; 给删除的 a 标签绑定单击事件</span><br><span class="line">            $(&quot;a&quot;).click(del);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table border&#x3D;&quot;1px&quot;  align&#x3D;&quot;center&quot; id&#x3D;&quot;employeeTable&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;Name&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;Email&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;Salary&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;  &lt;&#x2F;th&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;Tom&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;tom@tom.com&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;5000&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href&#x3D;&quot;deleteEmp?id&#x3D;001&quot;&gt;Delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;Jerry&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;jerry@sohu.com&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;8000&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href&#x3D;&quot;deleteEmp?id&#x3D;002&quot;&gt;Delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;Bob&lt;&#x2F;td&gt;&lt;td&gt;bob@tom.com&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;10000&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href&#x3D;&quot;deleteEmp?id&#x3D;003&quot;&gt;Delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;formDiv&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">        &lt;h4&gt;添加新员工&lt;&#x2F;h4&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td class&#x3D;&quot;word&quot;&gt;name: &lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td class&#x3D;&quot;inp&quot;&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;empName&quot; id&#x3D;&quot;idName&quot; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td class&#x3D;&quot;word&quot;&gt;email: &lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td class&#x3D;&quot;inp&quot;&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot; id&#x3D;&quot;idemail&quot; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td class&#x3D;&quot;word&quot;&gt;salary: &lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td class&#x3D;&quot;inp&quot;&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;salary&quot; id&#x3D;&quot;idsalary&quot; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td colspan&#x3D;&quot;2&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">                    &lt;button id&#x3D;&quot;addEmpButton&quot; value&#x3D;&quot;abc&quot;&gt;</span><br><span class="line">                        Submit</span><br><span class="line">                    &lt;&#x2F;button&gt;</span><br><span class="line">                &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></code></pre><p><img src="https://i.loli.net/2020/11/15/tmHueiRTUWgv31O.png" alt="1605442848_1_.png"></p><h3 id="css动画操作"><a href="#css动画操作" class="headerlink" title="css动画操作"></a>css动画操作</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;jquery-1.7.2.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        &#x2F;*</span><br><span class="line">            基本</span><br><span class="line">            show([speed,[easing],[fn]])</span><br><span class="line">            hide([speed,[easing],[fn]])</span><br><span class="line">            toggle([speed],[easing],[fn])</span><br><span class="line">            滑动</span><br><span class="line">            slideDown([spe],[eas],[fn])</span><br><span class="line">            slideUp([speed,[easing],[fn]])</span><br><span class="line">            slideToggle([speed],[easing],[fn])</span><br><span class="line">            淡入淡出</span><br><span class="line">            fadeIn([speed],[eas],[fn])</span><br><span class="line">            fadeOut([speed],[eas],[fn])</span><br><span class="line">            fadeTo([[spe],opa,[eas],[fn]])</span><br><span class="line">            fadeToggle([speed,[eas],[fn]])</span><br><span class="line">            *&#x2F;</span><br><span class="line">        $(function()&#123;</span><br><span class="line">            &#x2F;&#x2F;显示   show()</span><br><span class="line">            $(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">                $(&quot;#div1&quot;).show(1000);</span><br><span class="line">            &#125;);</span><br><span class="line">            &#x2F;&#x2F;隐藏  hide()</span><br><span class="line">            $(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">                $(&quot;#div1&quot;).hide(1000);</span><br><span class="line">            &#125;);</span><br><span class="line">            &#x2F;&#x2F;切换   toggle()</span><br><span class="line">            $(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">                $(&quot;#div1&quot;).toggle(1000);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;淡入   fadeIn()</span><br><span class="line">            $(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">                $(&quot;#div1&quot;).fadeIn(500);</span><br><span class="line">            &#125;);</span><br><span class="line">            &#x2F;&#x2F;淡出  fadeOut()</span><br><span class="line">            $(&quot;#btn5&quot;).click(function()&#123;</span><br><span class="line">                $(&quot;#div1&quot;).fadeOut(500);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;淡化到  fadeTo()</span><br><span class="line">            $(&quot;#btn6&quot;).click(function()&#123;</span><br><span class="line">                $(&quot;#div1&quot;).fadeTo(&quot;slow&quot;,Math.random());</span><br><span class="line">            &#125;);</span><br><span class="line">            &#x2F;&#x2F;淡化切换  fadeToggle()</span><br><span class="line">            $(&quot;#btn7&quot;).click(function()&#123;</span><br><span class="line">                $(&quot;#div1&quot;).fadeToggle(&quot;slow&quot;,&quot;linear&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table style&#x3D;&quot;float: left;&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;button id&#x3D;&quot;btn1&quot;&gt;显示show()&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;button id&#x3D;&quot;btn2&quot;&gt;隐藏hide()&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;button id&#x3D;&quot;btn3&quot;&gt;显示&#x2F;隐藏切换 toggle()&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;button id&#x3D;&quot;btn4&quot;&gt;淡入fadeIn()&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;button id&#x3D;&quot;btn5&quot;&gt;淡出fadeOut()&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;button id&#x3D;&quot;btn6&quot;&gt;淡化到fadeTo()&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;button id&#x3D;&quot;btn7&quot;&gt;淡化切换fadeToggle()&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;div1&quot; style&#x3D;&quot;float:left;border: 1px solid;background-color: blue;width: 300px;height: 200px;&quot;&gt;</span><br><span class="line">        jquery动画定义了很多种动画效果，可以很方便的使用这些动画效果</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java_web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JAVA_WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2020/11/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2020/11/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>整数或者小数：^[0-9]+.{0,1}[0-9]{0,2}$<br>只能输入数字：”^[0-9]<em>$”<br>只能输入n位的数字：”^\d{n}$”<br>只能输入至少n位的数字：”^\d{n,}$”<br>只能输入m~n位的数字：”^\d{m,n}$”<br>只能输入零和非零开头的数字：”^(0|[1-9][0-9]</em>)$”。<br>只能输入有两位小数的正实数：”^[0-9]+(.[0-9]{2})?$”。<br>只能输入有1<del>3位小数的正实数：”^[0-9]+(.[0-9]{1,3})?$”。<br>只能输入非零的正整数：”^+?[1-9][0-9]<em>$”。<br>只能输入非零的负整数：”^-[1-9][]0-9″</em>$。<br>只能输入长度为3的字符：”^.{3}$”。<br>只能输入由26个英文字母组成的字符串：”^[A-Za-z]+$”。<br>只能输入由26个大写英文字母组成的字符串：”^[A-Z]+$”。<br>只能输入由26个小写英文字母组成的字符串：”^[a-z]+$”。<br>只能输入由数字和26个英文字母组成的字符串：”^[A-Za-z0-9]+$”。<br>只能输入由数字、26个英文字母或者下划线组成的字符串：”^\w+$”。<br>验证用户密码：”^[a-zA-Z]\w{5,17}$”<br>正确格式为：以字母开头，长度在6</del>18之间，只能包含字符、数字和下划线。验证是否含有^%&amp;’,;=?$\”等字符：”[^%&amp;’,;=?$\x22]+”。<br>只能输入汉字：”^[\u4e00-\u9fa5]{0,}$”<br>验证Email地址：”^\w+([-+.]\w+)<em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$”。<br>验证InternetURL：”^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]</em>)?$”。<br>验证电话号码：”^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$”<br>正确格式为：”XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX”。<br>验证身份证号（15位或18位数字）：”^\d{15}|\d{18}$”。<br>验证一年的12个月：”^(0?[1-9]|1[0-2])$”<br>正确格式为：”01″～”09″和”1″～”12″。<br>验证一个月的31天：”^((0?[1-9])|((1|2)[0-9])|30|31)$”<br>正确格式为；”01″～”09″和”1″～”31″。<br>匹配中文字符的正则表达式： [\u4e00-\u9fa5]<br>匹配双字节字符(包括汉字在内)：[^\x00-\xff]<br>应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）  String.prototype.len=function(){return this.replace(/[^\x00-\xff]/g,”aa”).length;}<br>匹配空行的正则表达式：\n[\s| ]<em>\r<br>匹配html标签的正则表达式：&lt;(.*)&gt;(.</em>)&lt;/(.*)&gt;|&lt;(.*)/&gt;<br>匹配首尾空格的正则表达式：(^\s*)|(\s*$)<br>应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下：String.prototype.trim = function(){return this.replace(/(^\s*)|(\s*$)/g, “”);}<br>利用正则表达式分解和转换IP地址：<br>下面是利用正则表达式匹配IP地址，并将IP地址转换成对应数值的Javascript程序：<br>function IP2V(ip){re=/(\d+).(\d+).(\d+).(\d+)/g //匹配IP地址的正则表达式<br>if(re.test(ip)){return RegExp.$1<em>Math.pow(255,3))+RegExp.$2</em>Math.pow(255,2))+RegExp.$3<em>255+RegExp.$4</em>1}else{throw new Error(“Not a valid IP address!”)}}</p><p>不过上面的程序如果不用正则表达式，而直接用split函数来分解可能更简单，程序如下：<br>var ip=”10.100.20.168″ip=ip.split(“.”)alert(“IP值是：”+(ip[0]<em>255</em>255<em>255+ip[1]<em>255</em>255+ip[2]*255+ip[3]*1))<br>匹配Email地址的正则表达式：\w+([-+.]\w+)</em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em><br>匹配网址URL的正则表达式：http://([\w-]+.)+[\w-]+(/[\w- ./?%&amp;=]<em>)?<br>利用正则表达式限制网页表单里的文本框输入内容：<br>用正则表达式限制只能输入中文：onkeyup=”value=value.replace(/[^\u4E00-\u9FA5]/g,”)” onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^\u4E00-\u9FA5]/g,”))”<br>用正则表达式限制只能输入全角字符： onkeyup=”value=value.replace(/[^\uFF00-\uFFFF]/g,”)” onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^\uFF00-\uFFFF]/g,”))”<br>用正则表达式限制只能输入数字：onkeyup=”value=value.replace(/[^\d]/g,”) “onbeforepaste=”clipboardData.setData  (‘text’,clipboardData.getData(‘text’).replace(/[^\d]/g,”))”<br>用正则表达式限制只能输入数字和英文：onkeyup=”value=value.replace(/[\W]/g,”) “onbeforepaste=”clipboardData.setData  (‘text’,clipboardData.getData(‘text’).replace(/[^\d]/g,”))”<br>匹配中文字符的正则表达式： [\u4e00-\u9fa5]<br>评注：匹配中文还真是个头疼的事，有了这个表达式就好办了匹配双字节字符(包括汉字在内)：[^\x00-\xff]<br>评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）匹配空白行的正则表达式：\n\s</em>\r<br>评注：可以用来删除空白行匹配HTML标记的正则表达式：&lt;(\S*?)[^&gt;]<em>&gt;.</em>?|&lt;.*? /&gt;<br>评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力匹配首尾空白字符的正则表达式：^\s*|\s*$<br>评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式匹配Email地址的正则表达式：\w+([-+.]\w+)<em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em><br>评注：表单验证时很实用匹配网址URL的正则表达式 ：[a-zA-z]+://[^\s]</em><br>评注：网上流传的版本功能很有限，上面这个基本可以满足需求匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$<br>评注：表单验证时很实用匹配国内电话号码：\d{3}-\d{8}|\d{4}-\d{7}评注：匹配形式如 0511-4405222 或 021-87888822匹配腾讯QQ号：[1-9][0-9]   {4,}<br>评注：腾讯QQ号从10000开始匹配中国邮政编码：[1-9]\d{5}(?!\d)<br>评注：中国邮政编码为6位数字匹配身份证：\d{15}|\d{18}<br>评注：中国的身份证为15位或18位匹配ip地址：\d+.\d+.\d+.\d+<br>评注：提取ip地址时有用匹配特定数字：^[1-9]\d*$<br>//匹配正整数^-[1-9]\d*$<br>//匹配负整数^-?[1-9]\d*$<br>//匹配整数^[1-9]\d*|0$<br>//匹配非负整数（正整数 + 0）^-[1-9]\d*|0$<br>//匹配非正整数（负整数 + 0）^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*$<br>//匹配正浮点数^-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*)$<br>//匹配负浮点数^-?([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0)$<br>//匹配浮点数^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0$<br>//匹配非负浮点数（正浮点数 + 0）^(-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*))|0?.0+|0$　　//匹配非正浮点数（负浮点数 + 0）评注：处理大量数据时有用，具体应用时注意修正匹配特定字符串：^[A-Za-z]+$<br>//匹配由26个英文字母组成的字符串^[A-Z]+$<br>//匹配由26个英文字母的大写组成的字符串^[a-z]+$<br>//匹配由26个英文字母的小写组成的字符串^[A-Za-z0-9]+$<br>//匹配由数字和26个英文字母组成的字符串^\w+$<br>//匹配由数字、26个英文字母或者下划线组成的字符串评注：最基本也是最常用的一些表达式整理出来的一些常用的正则表达式 所属分类: JScript<br>(三)<br>Email : /^\w+([-+.]\w+)<em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$/<br>isEmail1 : /^\w+([.-]\w+)*@\w+([.-]\w+)*.\w+$/;<br>isEmail2 : /^.</em>@[^<em>]*$/;<br>Phone : /^(((\d{3}))|(\d{3}-))?((0\d{2,3})|0\d{2,3}-)?[1-9]\d{6,7}$/<br>Mobile : /^(((\d{3}))|(\d{3}-))?13\d{9}$/<br>Url : /^http://[A-Za-z0-9]+.[A-Za-z0-9]+[/=?%-&amp;</em><del>`@[]\’:+!]<em>([^&lt;&gt;&quot;&quot;])</em>$/<br>IdCard : /^\d{15}(\d{2}[A-Za-z0-9])?$/<br>Currency : /^\d+(.\d+)?$/<br>Number : /^\d+$/<br>Code : /^[1-9]\d{5}$/<br>QQ : /^[1-9]\d{4,8}$/<br>Integer : /^[-+]?\d+$/<br>Double : /^[-+]?\d+(.\d+)?$/<br>English : /^[A-Za-z]+$/<br>Chinese : /^[\u0391-\uFFE5]+$/<br>UnSafe : /^(([A-Z]<em>|[a-z]</em>|\d*|[-_\</del>!@#$%^&amp;*.()[]{}&lt;&gt;?\/\’\”]*)|.{0,5})$|\s/<br>PassWord :^[\w]{6,12}$<br>ZipCode : ^[\d]{6}/^(+\d+ )?((\d+) )?[\d ]+$/;  </p><p>//这个是国际通用的电话号码判断/^(1[0-2]\d|\d{1,2})$/;<br>//这个是年龄的判断/^\d+.\d{2}$/;<br>//这个是判断输入的是否为货币值<br>应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）String.prototype.len=function(){return this.replace([^\x00-\xff]/g,”aa”).length;}<br>应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下：String.prototype.trim = function(){return this.replace(/(^\s*)|(\s*$)/g, “”);}<br>匹配空行的正则表达式：\n[\s| ]<em>\r<br>匹配HTML标记的正则表达式：/&lt;(.*)&gt;.</em>&lt;/\1&gt;|&lt;(.*) /&gt;/<br>匹配首尾空格的正则表达式：(^\s*)|(\s*$)<br>匹配Email地址的正则表达式：\w+([-+.]\w+)<em>@\w+([-.]\w+)<em>.\w+([-.]\w+)</em><br>匹配网址URL的正则表达式：http://([\w-]+.)+[\w-]+(/[\w- ./?%&amp;=]</em>)?^\d+$　　//<br>匹配非负整数（正整数 + 0）^[0-9]<em>[1-9][0-9]</em>$　　//<br>匹配正整数^((-\d+)|(0+))$　　//<br>匹配非正整数（负整数 + 0）^-[0-9]<em>[1-9][0-9]</em>$　　//<br>匹配负整数^-?\d+$　　　　//<br>匹配整数^\d+(.\d+)?$　　//<br>匹配非负浮点数（正浮点数 + 0）^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>))$　//<br>匹配正浮点数^((-\d+(.\d+)?)|(0+(.0+)?))$　　//<br>匹配非正浮点数（负浮点数 + 0）^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>)))$ //<br>匹配负浮点数^(-?\d+)(.\d+)?$  </p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        &#x2F;&#x2F; 表示要求字符串中，是否包含字母e</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; new RegExp(&quot;e&quot;);</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;e&#x2F;; &#x2F;&#x2F; 也是正则表达式对象</span><br><span class="line">        &#x2F;&#x2F; 表示要求字符串中，是否包含字母a或b或c</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;[abc]&#x2F;;</span><br><span class="line">        &#x2F;&#x2F; 表示要求字符串，是否包含小写字母</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;[a-z]&#x2F;;</span><br><span class="line">        &#x2F;&#x2F; 表示要求字符串，是否包含任意大写字母</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;[A-Z]&#x2F;;</span><br><span class="line">        &#x2F;&#x2F; 表示要求字符串，是否包含任意数字</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;[0-9]&#x2F;;</span><br><span class="line">        &#x2F;&#x2F; 表示要求字符串，是否包含字母，数字，下划线</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;\w&#x2F;;</span><br><span class="line">        &#x2F;&#x2F; 表示要求 字符串中是否包含至少一个a</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;a+&#x2F;;</span><br><span class="line">        &#x2F;&#x2F; 表示要求 字符串中是否 *包含* 零个 或 多个a</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;a*&#x2F;;</span><br><span class="line">        &#x2F;&#x2F; 表示要求 字符串是否包含一个或零个a</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;a?&#x2F;;</span><br><span class="line">        &#x2F;&#x2F; 表示要求 字符串是否包含连续三个a</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;a&#123;3&#125;&#x2F;;</span><br><span class="line">        &#x2F;&#x2F; 表示要求 字符串是否包 至少3个连续的a，最多5个连续的a</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;a&#123;3,5&#125;&#x2F;;</span><br><span class="line">        &#x2F;&#x2F; 表示要求 字符串是否包 至少3个连续的a，</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;a&#123;3,&#125;&#x2F;;</span><br><span class="line">        &#x2F;&#x2F; 表示要求 字符串必须以a结尾</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;a$&#x2F;;</span><br><span class="line">        &#x2F;&#x2F; 表示要求 字符串必须以a打头</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;^a&#x2F;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 要求字符串中是否*包含* 至少3个连续的a</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;a&#123;3,5&#125;&#x2F;;</span><br><span class="line">        &#x2F;&#x2F; 要求字符串，从头到尾都必须完全匹配</span><br><span class="line">        &#x2F;&#x2F; var patt &#x3D; &#x2F;^a&#123;3,5&#125;$&#x2F;;</span><br><span class="line"></span><br><span class="line">        var patt &#x3D; &#x2F;^\w&#123;5,12&#125;$&#x2F;;</span><br><span class="line"></span><br><span class="line">        var str &#x3D; &quot;wzg168[[[&quot;;</span><br><span class="line"></span><br><span class="line">        alert( patt.test(str) );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="2020/11/11/javascript/"/>
      <url>2020/11/11/javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="JavaScript基础概念"><a href="#JavaScript基础概念" class="headerlink" title="JavaScript基础概念"></a>JavaScript基础概念</h2><p>Javascript 语言诞生主要是完成页面的数据验证。 因此它运行在客户端， 需要运行浏览器来解析执行 JavaScript 代码。</p><h2 id="JavaScript里面的特殊的值"><a href="#JavaScript里面的特殊的值" class="headerlink" title="JavaScript里面的特殊的值"></a>JavaScript里面的特殊的值</h2><p>JavaScript里特殊的值：<br>undefined: 未定义，所有js变量未赋于初始值的时候，默认值都undefined。<br>null:              空值<br>NaN: 全称是：NotaNumber。非数字。非数值。</p><h2 id="关系比较"><a href="#关系比较" class="headerlink" title="关系比较"></a>关系比较</h2><p>等于：   == 等于是简单的做字面值的比较<br>全等于： === 除了做字面值的比较之外， 还会比较两个变量的数据类型</p><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><p>且运算： &amp;&amp;<br>或运算： ||<br>取反运算： !  </p><p>/*<br>&amp;&amp; 且运算。<br>有两种情况：<br>第一种： 当表达式全为真的时候。 返回最后一个表达式的值。<br>第二种： 当表达式中， 有一个为假的时候。 返回第一个为假的表达式的值<br>|| 或运算<br>第一种情况： 当表达式全为假时， 返回最后一个表达式的值<br>第二种情况： 只要有一个表达式为真。 就会把回第一个为真的表达式的值<br>并且 &amp;&amp; 与运算 和 ||或运算 有短路。<br>短路就是说，当这个&amp;&amp;或||运算有结果了之后。后面的表达式不再执行<br>*/</p><p>&amp;&amp; 且运算。<br>有两种情况：<br>第一种： 当表达式全为真的时候。 返回最后一个表达式的值。<br>第二种： 当表达式中， 有一个为假的时候。 返回第一个为假的表达式的值*/<br>var a = “abc”;<br>var b = true;<br>var d = false;<br>var c = null;<br>// alert( a &amp;&amp; b );//true<br>// alert( b &amp;&amp; a );//true<br>// alert( a &amp;&amp; d ); // false<br>// alert( a &amp;&amp; c ); // null<br>/* || 或运算<br>第一种情况： 当表达式全为假时， 返回最后一个表达式的值<br>第二种情况： 只要有一个表达式为真。 就会把回第一个为真的表达式的值*/<br>// alert( d || c ); // null<br>// alert( c|| d ); //false<br>// alert( a || c ); //abc<br>// alert( b || c ); //true  </p><h2 id="js中的事件"><a href="#js中的事件" class="headerlink" title="js中的事件"></a>js中的事件</h2><p>onload 加载完成事件： 页面加载完成之后， 常用于做页面 js 代码初始化操作<br>onclick 单击事件： 常用于按钮的点击响应操作。<br>onblur 失去焦点事件： 常用用于输入框失去焦点后验证其输入内容是否合法。<br>onchange 内容发生改变事件： 常用于下拉列表和输入框内容发生改变后操作<br>onsubmit 表单提交事件： 常用于表单提交前， 验证所有表单项是否合法。 </p><h2 id="Dom模型"><a href="#Dom模型" class="headerlink" title="Dom模型"></a>Dom模型</h2><p>DOM 全称是Document ObjectModel文档对象模型<br>就是把文档中的标签。属性文本转换成对象来管理。</p><h3 id="用户名的校验"><a href="#用户名的校验" class="headerlink" title="用户名的校验"></a>用户名的校验</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;xiaoyan&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        &#x2F;*</span><br><span class="line">         * 需求：当用户点击了较验按钮，要获取输出框中的内容。然后验证其是否合法。&lt;br&#x2F;&gt;</span><br><span class="line">         * 验证的规则是：必须由字母，数字。下划线组成。并且长度是5到12位。</span><br><span class="line">         * *&#x2F;</span><br><span class="line">        function onclickFun()&#123;</span><br><span class="line">            &#x2F;&#x2F; 1 当我们要操作一个标签的时候，一定要先获取这个标签对象。</span><br><span class="line">            var usernameObh&#x3D;document.getElementById(&quot;username&quot;);</span><br><span class="line">            &#x2F;&#x2F; [object HTMLInputElement] 它就是dom对象</span><br><span class="line">            var userText&#x3D;usernameObh.value;</span><br><span class="line">            var patt &#x3D; &#x2F;^\w&#123;5,12&#125;$&#x2F;;</span><br><span class="line">            &#x2F;*</span><br><span class="line">            *  test()方法用于测试某个字符串，是不是匹配我的规则 ，</span><br><span class="line">            *  匹配就返回true。不匹配就返回false.</span><br><span class="line">            * *&#x2F;</span><br><span class="line">            if(patt.test(userText))&#123;</span><br><span class="line">                alert(&quot;合法&quot;);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                alert(&quot;不合法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    用户名:&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button onclick&#x3D;&quot;onclickFun()&quot;&gt;校验&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></code></pre><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;用户名校验&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        function oneClickFun()&#123;</span><br><span class="line">        &#x2F;&#x2F; 1 当我们要操作一个标签的时候，一定要先获取这个标签对象。</span><br><span class="line">        var usernameobj&#x3D; document.getElementById(&quot;username01&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        var userText&#x3D;usernameobj.value;</span><br><span class="line">        &#x2F;&#x2F;正则表达式</span><br><span class="line">            var usernameHtm&#x3D;document.getElementById(&quot;usernameSpan&quot;);</span><br><span class="line"></span><br><span class="line">        var patt &#x3D; &#x2F;^\w&#123;5,12&#125;$&#x2F;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if(patt.test(userText))&#123;</span><br><span class="line">            usernameHtm.innerHTML &#x3D; &quot;&lt;img src&#x3D;\&quot;right.png\&quot; width&#x3D;\&quot;18\&quot; height&#x3D;\&quot;18\&quot;&gt; 用户名输入合法&quot;;</span><br><span class="line">            alert(&quot;用户名输入合法&quot;);</span><br><span class="line">        &#125;else</span><br><span class="line">        &#123;</span><br><span class="line">            usernameHtm.innerHTML &#x3D; &quot;&lt;img src&#x3D;\&quot;wrong.png\&quot; width&#x3D;\&quot;18\&quot; height&#x3D;\&quot;18\&quot;&gt;&quot;;</span><br><span class="line">            alert(&quot;用户名输入不合法&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    用户名:&lt;input type&#x3D;&quot;text&quot;  id&#x3D;&quot;username01&quot;&gt;</span><br><span class="line">    &lt;span id&#x3D;&quot;usernameSpan&quot; style&#x3D;&quot;color: red;&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button onclick&#x3D;&quot;oneClickFun()&quot;&gt;校验&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></code></pre><p><img src="https://i.loli.net/2020/11/12/IWeJtalZwCgP6M4.png" alt="1605181953_1_.png"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂七杂八</title>
      <link href="2020/11/11/java8/"/>
      <url>2020/11/11/java8/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h1 id="实现trim方法"><a href="#实现trim方法" class="headerlink" title="实现trim方法"></a>实现trim方法</h1><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s=<span class="string">&quot;  dwf  &quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j=s.length();</span><br><span class="line">        <span class="keyword">while</span>(s.startsWith(<span class="string">&quot; &quot;</span>,i))&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(s.endsWith(<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">            j--;</span><br><span class="line">            s=s.substring(<span class="number">0</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(j);</span><br><span class="line">        String c=s.substring(i,j);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>#String类的replaceAll方法<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;12hello34world12&quot;</span>;</span><br><span class="line">        String string=str.replaceAll(<span class="string">&quot;\\d+&quot;</span>,<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        System.out.println(string);</span><br></pre></td></tr></table></figure><br>结果：,hello,world,</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;12hello34world12&quot;</span>;</span><br><span class="line">        String string=str.replaceAll(<span class="string">&quot;\\d&quot;</span>,<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        System.out.println(string);</span><br></pre></td></tr></table></figure></code></pre><p>结果:,,hello,world,</p><h1 id="字符串指定位置反转"><a href="#字符串指定位置反转" class="headerlink" title="字符串指定位置反转"></a>字符串指定位置反转</h1><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_test04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">6</span>;</span><br><span class="line">        StringBuffer sb=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String s=<span class="string">&quot;abcdefghijk&quot;</span>;</span><br><span class="line">        sb.append(s.substring(<span class="number">0</span>,a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=b;i&gt;a;i--)&#123;</span><br><span class="line">            sb.append(s.substring(i-<span class="number">1</span>,i));</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(s.substring(b,s.length()));</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h1 id="字符串出现次数"><a href="#字符串出现次数" class="headerlink" title="字符串出现次数"></a>字符串出现次数</h1><p>获取一个字符串在另一个字符串中出现的次数。比如：获取“ ab”在 “abkkcadkabkebfkabkskab” 中出现的次数</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_test05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s=<span class="string">&quot;absdwabdwrrab&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(s.contains(<span class="string">&quot;ab&quot;</span>))&#123;</span><br><span class="line">            i++;</span><br><span class="line">            s=s.substring(s.indexOf(<span class="string">&quot;ab&quot;</span>)+<span class="number">1</span>,s.length());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h1 id="字符串自然排序"><a href="#字符串自然排序" class="headerlink" title="字符串自然排序"></a>字符串自然排序</h1><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_test06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s=<span class="string">&quot;abdgrgregr&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span> [] c=s.toCharArray();</span><br><span class="line">         Arrays.sort(c);</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">char</span>[] d=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h1 id="null长度"><a href="#null长度" class="headerlink" title="null长度"></a>null长度</h1><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class vankood_test002 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String str&#x3D;null;</span><br><span class="line">        StringBuffer sb&#x3D;new StringBuffer();</span><br><span class="line">        sb.append(str);</span><br><span class="line">        System.out.println(sb.length());</span><br><span class="line">        System.out.println(sb);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><p>结果：4 null</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> LeetCode </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射_基础</title>
      <link href="2020/11/04/%E5%8F%8D%E5%B0%84_%E5%9F%BA%E7%A1%80/"/>
      <url>2020/11/04/%E5%8F%8D%E5%B0%84_%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1603108626262&di=971a08ed7ce6dadf57d7cce07a3e5e05&imgtype=0&src=http://s7.51cto.com/wyfs02/M01/73/3F/wKioL1X4zfyRH-yTAABu41grSmY047.jpg" alt="avatar"></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h2 id="获取claa类实例的四种方法"><a href="#获取claa类实例的四种方法" class="headerlink" title="获取claa类实例的四种方法"></a>获取claa类实例的四种方法</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Class的实例的四种方式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test03</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//方式一：调用运行时类的属性：.class</span></span><br><span class="line">         Class clazz=Person.class;</span><br><span class="line">         System.out.println(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：通过运行时类的对象,调用getClass()</span></span><br><span class="line">        Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">        Class clazz2=p1.getClass();</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：调用Class的静态方法：forName(String classPath)</span></span><br><span class="line">        Class clazz3=Class.forName(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式四：使用类的加载器：ClassLoader </span></span><br><span class="line">        ClassLoader classLoader = vanned_02.class.getClassLoader();</span><br><span class="line">        Class clazz4=classLoader.loadClass(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">        System.out.println(clazz4);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="读取配置文件的两种方式"><a href="#读取配置文件的两种方式" class="headerlink" title="读取配置文件的两种方式"></a>读取配置文件的两种方式</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Properties pros =  <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//此时的文件默认在当前的module下。</span></span><br><span class="line">        <span class="comment">//读取配置文件的方式一：</span></span><br><span class="line"><span class="comment">//        FileInputStream fis = new FileInputStream(&quot;jdbc.properties&quot;);</span></span><br><span class="line"><span class="comment">//        FileInputStream fis = new FileInputStream(&quot;src\\jdbc1.properties&quot;);</span></span><br><span class="line"><span class="comment">//        pros.load(fis);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取配置文件的方式二：使用ClassLoader</span></span><br><span class="line">        <span class="comment">//配置文件默认识别为：当前module的src下</span></span><br><span class="line">        ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">&quot;jdbc1.properties&quot;</span>);</span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user + <span class="string">&quot;,password = &quot;</span> + password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举类和注解_基础</title>
      <link href="2020/10/28/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
      <url>2020/10/28/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1603108626262&di=971a08ed7ce6dadf57d7cce07a3e5e05&imgtype=0&src=http://s7.51cto.com/wyfs02/M01/73/3F/wKioL1X4zfyRH-yTAABu41grSmY047.jpg" alt="avatar"></p><h1 id="枚举类和注解"><a href="#枚举类和注解" class="headerlink" title="枚举类和注解"></a>枚举类和注解</h1><h2 id="枚举方法"><a href="#枚举方法" class="headerlink" title="枚举方法"></a>枚举方法</h2><h3 id="枚举类的使用"><a href="#枚举类的使用" class="headerlink" title="枚举类的使用"></a>枚举类的使用</h3><p>1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类<br>2.当需要定义一组常量时，强烈建议使用枚举类<br>3.如果枚举类中只有一个对象，则可以作为单例模式的实现方式。  </p><h3 id="如何定义枚举类"><a href="#如何定义枚举类" class="headerlink" title="如何定义枚举类"></a>如何定义枚举类</h3><p>方式一：jdk5.0之前，自定义枚举类<br>方式二：jdk5.0，可以使用enum关键字定义枚举类  </p><h3 id="Enum类中的常用方法："><a href="#Enum类中的常用方法：" class="headerlink" title="Enum类中的常用方法："></a>Enum类中的常用方法：</h3><p>values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。  </p><p>valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异IllegalArgumentException。</p><p>toString()：返回当前枚举类对象常量的名称  </p><h3 id="使用enum关键字定义的枚举类实现接口的情况"><a href="#使用enum关键字定义的枚举类实现接口的情况" class="headerlink" title="使用enum关键字定义的枚举类实现接口的情况"></a>使用enum关键字定义的枚举类实现接口的情况</h3><p>情况一：实现接口，在enum类中实现抽象方法<br>情况二：让枚举类的对象分别实现接口中的抽象方法  </p><h3 id="jdk5-0之前使用方法"><a href="#jdk5-0之前使用方法" class="headerlink" title="jdk5.0之前使用方法"></a>jdk5.0之前使用方法</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public class vankood_001 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Season Spring&#x3D;Season.SPRING;</span><br><span class="line">        System.out.println(Spring);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Season&#123;</span><br><span class="line">    &#x2F;&#x2F;1.声明Season对象的属性:private final修饰</span><br><span class="line">    private final String seasonName;</span><br><span class="line">    private final String seasonDesc;</span><br><span class="line"></span><br><span class="line">    private Season(String seasonName,String seasonDesc)&#123;</span><br><span class="line">        this.seasonName&#x3D;seasonName;</span><br><span class="line">        this.seasonDesc&#x3D;seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;3.提供当前枚举类的多个对象：public static final的</span><br><span class="line">    public static final Season SPRING &#x3D; new Season(&quot;春天&quot;,&quot;春暖花开&quot;);</span><br><span class="line">    public static final Season SUMMER &#x3D; new Season(&quot;夏天&quot;,&quot;夏日炎炎&quot;);</span><br><span class="line">    public static final Season AUTUMN &#x3D; new Season(&quot;秋天&quot;,&quot;秋高气爽&quot;);</span><br><span class="line">    public static final Season WINTER &#x3D; new Season(&quot;冬天&quot;,&quot;冰天雪地&quot;);</span><br><span class="line">    </span><br><span class="line">    public String getSeasonName()&#123;</span><br><span class="line">        return seasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getSeasonDesc()&#123;</span><br><span class="line">        return seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Season&#123;&quot; +</span><br><span class="line">                &quot;seasonName&#x3D;&#39;&quot; + seasonName + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, seasonDesc&#x3D;&#39;&quot; + seasonDesc + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h3 id="jdk5-0之后使用方法（枚举类型）"><a href="#jdk5-0之后使用方法（枚举类型）" class="headerlink" title="jdk5.0之后使用方法（枚举类型）"></a>jdk5.0之后使用方法（枚举类型）</h3><p>``````</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂七杂八</title>
      <link href="2020/10/26/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
      <url>2020/10/26/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h1 id="实现trim方法"><a href="#实现trim方法" class="headerlink" title="实现trim方法"></a>实现trim方法</h1><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s=<span class="string">&quot;  dwf  &quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j=s.length();</span><br><span class="line">        <span class="keyword">while</span>(s.startsWith(<span class="string">&quot; &quot;</span>,i))&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(s.endsWith(<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">            j--;</span><br><span class="line">            s=s.substring(<span class="number">0</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(j);</span><br><span class="line">        String c=s.substring(i,j);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>#String类的replaceAll方法<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;12hello34world12&quot;</span>;</span><br><span class="line">        String string=str.replaceAll(<span class="string">&quot;\\d+&quot;</span>,<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        System.out.println(string);</span><br></pre></td></tr></table></figure><br>结果：,hello,world,</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;12hello34world12&quot;</span>;</span><br><span class="line">        String string=str.replaceAll(<span class="string">&quot;\\d&quot;</span>,<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        System.out.println(string);</span><br></pre></td></tr></table></figure></code></pre><p>结果:,,hello,world,</p><h1 id="字符串指定位置反转"><a href="#字符串指定位置反转" class="headerlink" title="字符串指定位置反转"></a>字符串指定位置反转</h1><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_test04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">6</span>;</span><br><span class="line">        StringBuffer sb=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String s=<span class="string">&quot;abcdefghijk&quot;</span>;</span><br><span class="line">        sb.append(s.substring(<span class="number">0</span>,a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=b;i&gt;a;i--)&#123;</span><br><span class="line">            sb.append(s.substring(i-<span class="number">1</span>,i));</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(s.substring(b,s.length()));</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h1 id="字符串出现次数"><a href="#字符串出现次数" class="headerlink" title="字符串出现次数"></a>字符串出现次数</h1><p>获取一个字符串在另一个字符串中出现的次数。比如：获取“ ab”在 “abkkcadkabkebfkabkskab” 中出现的次数</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_test05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s=<span class="string">&quot;absdwabdwrrab&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(s.contains(<span class="string">&quot;ab&quot;</span>))&#123;</span><br><span class="line">            i++;</span><br><span class="line">            s=s.substring(s.indexOf(<span class="string">&quot;ab&quot;</span>)+<span class="number">1</span>,s.length());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h1 id="字符串自然排序"><a href="#字符串自然排序" class="headerlink" title="字符串自然排序"></a>字符串自然排序</h1><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_test06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s=<span class="string">&quot;abdgrgregr&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span> [] c=s.toCharArray();</span><br><span class="line">         Arrays.sort(c);</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">char</span>[] d=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h1 id="null长度"><a href="#null长度" class="headerlink" title="null长度"></a>null长度</h1><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class vankood_test002 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String str&#x3D;null;</span><br><span class="line">        StringBuffer sb&#x3D;new StringBuffer();</span><br><span class="line">        sb.append(str);</span><br><span class="line">        System.out.println(sb.length());</span><br><span class="line">        System.out.println(sb);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><p>结果：4 null</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> LeetCode </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/26/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86_%E5%9F%BA%E7%A1%80/"/>
      <url>2020/10/26/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86_%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start-hamapi-huasongyuan"><a href="#Quick-Start-hamapi-huasongyuan" class="headerlink" title="Quick Start hamapi huasongyuan"></a>Quick Start hamapi huasongyuan</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> LeetCode </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/26/hello-world/"/>
      <url>2020/10/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start-hamapi-huasongyuan"><a href="#Quick-Start-hamapi-huasongyuan" class="headerlink" title="Quick Start hamapi huasongyuan"></a>Quick Start hamapi huasongyuan</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> LeetCode </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hashmap的底层实现原理</title>
      <link href="2020/10/23/hashmap%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>2020/10/23/hashmap%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1603108626262&di=971a08ed7ce6dadf57d7cce07a3e5e05&imgtype=0&src=http://s7.51cto.com/wyfs02/M01/73/3F/wKioL1X4zfyRH-yTAABu41grSmY047.jpg" alt="avatar"></p><h1 id="hashmap的底层实现原理"><a href="#hashmap的底层实现原理" class="headerlink" title="hashmap的底层实现原理"></a>hashmap的底层实现原理</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>程序</strong>：是为完成特定任务、某种语言编写的一组指令的集合。即指一段<em>静态的代码</em>，静态对象。<br><strong>进程</strong>：是程序的一次执行过程。或者正在运行的一个程序。是一个动态过程：有他自身产生、存在、消亡的过程。<br><strong>线程</strong>：程序内部的一条执行路径。线程是程序执行的一条路径, 一个进程中可以包含多条线程。多线程并发执行可以提高程序的效率, 可以同时完成多项工作。</p><p><strong>并行</strong>：多个cpu同时执行多个任务。比如多个人做不同的事情。<br><strong>并发</strong>：一个cpu（采用时间片）同时执行多个任务。比如：秒杀、多个人同时做一件事情。</p><p><strong>守护线程</strong>用来服务于用户线程；不需要上层逻辑介入。当线程只剩下守护线程的时候,JVM就会退出；补充一点如果还有其他的任意一个用户线程还在，JVM就不会退出。  java垃圾回收就是一种典型的守护线程。  </p><p>守护线程是用来服务用户线程的，通过在start()方法前调用  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread.setDaemon(true)  </span><br></pre></td></tr></table></figure><p>可以把一个用户线程变成一个守护线程。  </p><p><strong>用户线程</strong>：我们平常创建的普通线程。</p><h2 id="线程的创建和使用"><a href="#线程的创建和使用" class="headerlink" title="线程的创建和使用"></a>线程的创建和使用</h2><h3 id="方式一：继承于Thread类"><a href="#方式一：继承于Thread类" class="headerlink" title="方式一：继承于Thread类"></a>方式一：继承于Thread类</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多线程的创建，方式一：继承于Thread类</span></span><br><span class="line"><span class="comment"> * 1. 创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="comment"> * 2. 重写Thread类的run() --&gt; 将此线程执行的操作声明在run()中</span></span><br><span class="line"><span class="comment"> * 3. 创建Thread类的子类的对象</span></span><br><span class="line"><span class="comment"> * 4. 通过此对象调用start()</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 例子：遍历100以内的所有的偶数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> vankood</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vankood_01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建Thread类的子类的对象</span></span><br><span class="line">        MyThread m1=<span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//4. 通过此对象调用start()</span></span><br><span class="line">        m1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. 创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//2. 重写Thread类的run() --&gt; 将此线程执行的操作声明在run()中</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;分线程&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习：创建两个分线程，其中一个线程遍历100以内的偶数，另一个线程遍历100以内的奇数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-02-13 下午 2:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mythread1 m1=<span class="keyword">new</span> Mythread1();</span><br><span class="line">        Mythread2 m2=<span class="keyword">new</span> Mythread2();</span><br><span class="line">        m1.start();</span><br><span class="line">        m2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h4 id="匿名子类方式创建线程"><a href="#匿名子类方式创建线程" class="headerlink" title="匿名子类方式创建线程"></a>匿名子类方式创建线程</h4><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_03</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="string">&quot;线程一&quot;</span>) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">                   <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                   System.out.println(<span class="keyword">this</span>.getName()+<span class="string">&quot;&quot;</span>+i);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="string">&quot;线程二&quot;</span>) &#123;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">                   <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                       System.out.println(<span class="keyword">this</span>.getName()+<span class="string">&quot;&quot;</span>+i);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;.start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h3 id="方式二：实现Runnable接口"><a href="#方式二：实现Runnable接口" class="headerlink" title="方式二：实现Runnable接口"></a>方式二：实现Runnable接口</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 创建多线程的方式二：实现Runnable接口</span></span><br><span class="line"><span class="comment">        * 1. 创建一个实现了Runnable接口的类</span></span><br><span class="line"><span class="comment">        * 2. 实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line"><span class="comment">        * 3. 创建实现类的对象</span></span><br><span class="line"><span class="comment">        * 4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line"><span class="comment">        * 5. 通过Thread类的对象调用start()</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 比较创建线程的两种方式。</span></span><br><span class="line"><span class="comment">        * 开发中：优先选择：实现Runnable接口的方式</span></span><br><span class="line"><span class="comment">        * 原因：1. 实现的方式没有类的单继承性的局限性</span></span><br><span class="line"><span class="comment">        *      2. 实现的方式更适合来处理多个线程有共享数据的情况。</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 联系：public class Thread implements Runnable</span></span><br><span class="line"><span class="comment"> * 相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@create</span> 2019-02-13 下午 4:34</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="comment">// 1. 创建一个实现了Runnable接口的类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 2. 实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mythread mt=<span class="keyword">new</span> Mythread();</span><br><span class="line">        <span class="comment">//3. 创建实现类的对象</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(mt);</span><br><span class="line">        <span class="comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line">        t1.setName(<span class="string">&quot;线程一&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Mythread mt2=<span class="keyword">new</span> Mythread();</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(mt2);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程二&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//5. 通过Thread类的对象调用start()</span></span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h3 id="两种方式的对比"><a href="#两种方式的对比" class="headerlink" title="两种方式的对比"></a>两种方式的对比</h3><p>比较创建线程的两种方式。<br> <strong>开发中</strong>：优先选择：实现Runnable接口的方式<br>** 原因： **  </p><ol><li>实现的方式没有类的单继承性的局限性  </li><li>实现的方式更适合来处理多个线程有共享数据的情况。  </li></ol><p>  <strong>联系：</strong><br>   public class Thread implements Runnable<br>  Thread类实现了Runnable接口。</p><p><strong>相同点：</strong><br>  两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。</p><h2 id="线程的常用方法"><a href="#线程的常用方法" class="headerlink" title="线程的常用方法"></a>线程的常用方法</h2><ul><li>测试Thread中的常用方法：<ol><li>start():启动当前线程；调用当前线程的run()</li><li>run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</li><li>currentThread():静态方法，返回执行当前代码的线程<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().getName()</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="4"><li>getName():获取当前线程的名字</li></ol></li><li><ol start="5"><li>setName():设置当前线程的名字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HelloThread h1 &#x3D; new HelloThread(&quot;线程一&quot;);</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="6"><li>yield():释放当前cpu的执行权</li></ol></li><li><ol start="7"><li>join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才</li></ol></li><li>结束阻塞状态。</li><li><ol start="8"><li>stop():已过时。当执行此方法时，强制结束当前线程。</li></ol></li><li><ol start="9"><li>sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前</li></ol></li><li>线程是阻塞状态。</li><li><ol start="10"><li>isAlive():判断当前线程是否存活</li></ol></li><li></li><li></li><li>线程的优先级：</li><li>1.</li><li>MAX_PRIORITY：10</li><li>MIN _PRIORITY：1</li><li>NORM_PRIORITY：5  –&gt;默认优先级</li><li>2.如何获取和设置当前线程的优先级：</li><li>getPriority():获取线程的优先级</li><li>setPriority(int p):设置线程的优先级</li><li></li><li>说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下</li><li>被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    sleep(10);</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + Thread.currentThread().getPriority() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(i % 20 == 0)&#123;</span></span><br><span class="line"><span class="comment">//                yield();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        HelloThread h1 = <span class="keyword">new</span> HelloThread(<span class="string">&quot;Thread：1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        h1.setName(&quot;线程一&quot;);</span></span><br><span class="line">        <span class="comment">//设置分线程的优先级</span></span><br><span class="line">        h1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"></span><br><span class="line">        h1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给主线程命名</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">        Thread.currentThread().setPriority(Thread.MIN_PRIORITY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + Thread.currentThread().getPriority() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(i == 20)&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    h1.join();</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(h1.isAlive());</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2>线程的生命周期包含5个阶段，包括：新建、就绪、运行、阻塞、销毁。 <img src="https://i.loli.net/2020/10/22/A9UDK6Xnx7kefZ3.png" alt="xiancheng1.png"></li><li>*新建**：就是刚使用new方法，new出来的线程；  </li><li>*就绪**：就是调用的线程的start()方法后，这时候线程处于等待CPU分配资源阶段，谁先抢的CPU资源，谁开始执行;  </li><li>*运行**：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run方法定义了线程的操作和功能;  </li><li>*阻塞**：在运行状态的时候，可能因为某些原因导致运行状态的线程变成了阻塞状态，比如sleep()、wait()之后线程就处于了阻塞状态，这个时候需要其他机制将处于阻塞状态的线程唤醒，比如调用notify或者notifyAll()方法。唤醒的线程不会立刻执行run方法，它们要再次等待CPU分配资源进入运行状态;  </li><li>*死亡**：如果线程正常执行完毕后或线程被提前强制性的终止或出现异常导致结束，那么线程就要被销毁，释放资源;<h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2>在Java中，我们通过同步机制，来解决线程的安全问题。  <h3 id="方式一：同步代码块"><a href="#方式一：同步代码块" class="headerlink" title="方式一：同步代码块"></a>方式一：同步代码块</h3><pre><code>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line"><span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">说明：  </span><br><span class="line"><span class="number">1.</span>操作共享数据的代码，即为需要被同步的代码。  --&gt;不能包含代码多了，也不能包含代码少了。  </span><br><span class="line"><span class="number">2.</span>共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。  </span><br><span class="line"><span class="number">3.</span>同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。</span><br><span class="line">要求：多个线程必须要共用同一把锁。</span><br><span class="line">补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用<span class="keyword">this</span>充当同步监视器。</span><br><span class="line">### 方式二：同步方法。</span><br><span class="line">如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="number">5.</span>同步的方式，解决了线程的安全问题。---好处  操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。 ---局限性  </span><br><span class="line"></span><br><span class="line">#### 实现Runnable接口的线程同步（同步代码块）</span><br><span class="line">```java  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//    Object obj = new Object();</span></span><br><span class="line"><span class="comment">//    Dog dog = new Dog();</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Object obj = new Object();</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;<span class="comment">//此时的this:唯一的Window1的对象   //方式二：synchronized (dog) &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window1 w = <span class="keyword">new</span> Window1();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h4 id="实现Runnable接口的线程同步（同步方法）"><a href="#实现Runnable接口的线程同步（同步方法）" class="headerlink" title="实现Runnable接口的线程同步（同步方法）"></a>实现Runnable接口的线程同步（同步方法）</h4><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用同步方法解决实现Runnable接口的线程安全问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  关于同步方法的总结：</span></span><br><span class="line"><span class="comment"> *  1. 同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</span></span><br><span class="line"><span class="comment"> *  2. 非静态的同步方法，同步监视器是：this</span></span><br><span class="line"><span class="comment"> *     静态的同步方法，同步监视器是：当前类本身</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="comment">//同步监视器：this</span></span><br><span class="line">        <span class="comment">//synchronized (this)&#123;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line"></span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window3 w = <span class="keyword">new</span> Window3();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h4 id="继承Thread类的线程同步-同步代码块"><a href="#继承Thread类的线程同步-同步代码块" class="headerlink" title="继承Thread类的线程同步(同步代码块)"></a>继承Thread类的线程同步(同步代码块)</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 使用同步代码块解决继承Thread类的方式的线程安全问题</span><br><span class="line"> *</span><br><span class="line"> * 例子：创建三个窗口卖票，总票数为100张.使用继承Thread类的方式</span><br><span class="line"> *</span><br><span class="line"> * 说明：在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。</span><br><span class="line"> *</span><br><span class="line"> * @author shkstart</span><br><span class="line"> * @create 2019-02-13 下午 4:20</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Window2 extends Thread&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static int ticket &#x3D; 100;</span><br><span class="line"></span><br><span class="line">    private static Object obj &#x3D; new Object();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line"></span><br><span class="line">        while(true)&#123;</span><br><span class="line">            &#x2F;&#x2F;正确的</span><br><span class="line">&#x2F;&#x2F;            synchronized (obj)&#123;</span><br><span class="line">            synchronized (Window2.class)&#123;&#x2F;&#x2F;Class clazz &#x3D; Window2.class,Window2.class只会加载一次</span><br><span class="line">                &#x2F;&#x2F;错误的方式：this代表着t1,t2,t3三个对象</span><br><span class="line">&#x2F;&#x2F;              synchronized (this)&#123;</span><br><span class="line"></span><br><span class="line">                if(ticket &gt; 0)&#123;</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(100);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(getName() + &quot;：卖票，票号为：&quot; + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class WindowTest2 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Window2 t1 &#x3D; new Window2();</span><br><span class="line">        Window2 t2 &#x3D; new Window2();</span><br><span class="line">        Window2 t3 &#x3D; new Window2();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.setName(&quot;窗口1&quot;);</span><br><span class="line">        t2.setName(&quot;窗口2&quot;);</span><br><span class="line">        t3.setName(&quot;窗口3&quot;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h4 id="继承Thread类的线程同步-同步方法"><a href="#继承Thread类的线程同步-同步方法" class="headerlink" title="继承Thread类的线程同步(同步方法)"></a>继承Thread类的线程同步(同步方法)</h4><pre><code>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用同步方法处理继承Thread类的方式中的线程安全问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window4</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="comment">//同步监视器：Window4.class</span></span><br><span class="line">        <span class="comment">//private synchronized void show()&#123; //同步监视器：t1,t2,t3。此种解决方式是错误的</span></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window4 t1 = <span class="keyword">new</span> Window4();</span><br><span class="line">        Window4 t2 = <span class="keyword">new</span> Window4();</span><br><span class="line">        Window4 t3 = <span class="keyword">new</span> Window4();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="方式三：Lock锁-—-JDK5-0新增"><a href="#方式三：Lock锁-—-JDK5-0新增" class="headerlink" title="方式三：Lock锁  — JDK5.0新增"></a>方式三：Lock锁  — JDK5.0新增</h3><p>  <strong>1.synchronized 与 Lock的异同？</strong><br><strong>相同</strong>：二者都可以解决线程安全问题<br><strong>不同</strong>：synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器Lock需要手动的启动同步（lock()），同时结束同步也需要手动的实现（unlock()）</p><p><strong>2.优先使用顺序：</strong><br> Lock 同步代码块（已经进入了方法体，分配了相应资源）  同步方法（在方法体之外）</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);<span class="comment">//true表示公平锁</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：售票，票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法：unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h2 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h2><h3 id="notify和notifyall"><a href="#notify和notifyall" class="headerlink" title="notify和notifyall"></a>notify和notifyall</h3><pre><code><figure class="highlight plain"><figcaption><span>com.atguigu.java2;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 线程通信的例子：使用两个线程打印 1-100。线程1, 线程2 交替打印</span><br><span class="line"> *</span><br><span class="line"> * 涉及到的三个方法：</span><br><span class="line"> * wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</span><br><span class="line"> * notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</span><br><span class="line"> * notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。</span><br><span class="line"> *</span><br><span class="line"> * 说明：</span><br><span class="line"> * 1.wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。</span><br><span class="line"> * 2.wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。</span><br><span class="line"> *    否则，会出现IllegalMonitorStateException异常</span><br><span class="line"> * 3.wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</span><br><span class="line"> *</span><br><span class="line"> * 面试题：sleep() 和 wait()的异同？</span><br><span class="line"> * 1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</span><br><span class="line"> * 2.不同点：1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</span><br><span class="line"> *          2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</span><br><span class="line"> *          3）关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。</span><br><span class="line"> *</span><br><span class="line"> * @author shkstart</span><br><span class="line"> * @create 2019-02-15 下午 4:21</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Number implements Runnable&#123;</span><br><span class="line">    private int number &#x3D; 1;</span><br><span class="line">    private Object obj &#x3D; new Object();</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line"></span><br><span class="line">        while(true)&#123;</span><br><span class="line"></span><br><span class="line">            synchronized (obj) &#123;</span><br><span class="line"></span><br><span class="line">                obj.notify();</span><br><span class="line"></span><br><span class="line">                if(number &lt;&#x3D; 100)&#123;</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(10);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + &quot;:&quot; + number);</span><br><span class="line">                    number++;</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line">                        &#x2F;&#x2F;使得调用如下wait()方法的线程进入阻塞状态</span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class CommunicationTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Number number &#x3D; new Number();</span><br><span class="line">        Thread t1 &#x3D; new Thread(number);</span><br><span class="line">        Thread t2 &#x3D; new Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(&quot;线程1&quot;);</span><br><span class="line">        t2.setName(&quot;线程2&quot;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h2 id="jdk5-0新增线程创建方式"><a href="#jdk5-0新增线程创建方式" class="headerlink" title="jdk5.0新增线程创建方式"></a>jdk5.0新增线程创建方式</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流_基础</title>
      <link href="2020/10/22/IO%E6%B5%81_%E5%9F%BA%E7%A1%80/"/>
      <url>2020/10/22/IO%E6%B5%81_%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1603108626262&di=971a08ed7ce6dadf57d7cce07a3e5e05&imgtype=0&src=http://s7.51cto.com/wyfs02/M01/73/3F/wKioL1X4zfyRH-yTAABu41grSmY047.jpg" alt="avatar"></p><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><p>1.操作数据单位：字节流、字符流<br>2.数据的流向：输入流、输出流<br>3.流的角色：节点流、处理流  </p><p>二、流的体系结构<br><img src="https://i.loli.net/2020/11/02/h7LXfzJ2DA3G5OC.png" alt="1604300816_1_.png"></p><h2 id="File类的使用"><a href="#File类的使用" class="headerlink" title="File类的使用"></a>File类的使用</h2><h3 id="字符流读取文本文件"><a href="#字符流读取文本文件" class="headerlink" title="字符流读取文本文件"></a>字符流读取文本文件</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderWriterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相较于当前工程</span></span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;day09\\hello.txt&quot;</span>);</span><br><span class="line">        System.out.println(file1.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将day09下的hello.txt文件内容读入程序中，并输出到控制台</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    说明点：</span></span><br><span class="line"><span class="comment">    1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line"><span class="comment">    2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">    3. 读入的文件一定要存在，否则就会报FileNotFoundException。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.实例化File类的对象，指明要操作的文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相较于当前Module</span></span><br><span class="line">            <span class="comment">//2.提供具体的流</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入</span></span><br><span class="line">            <span class="comment">//read():返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//        int data = fr.read();</span></span><br><span class="line"><span class="comment">//        while(data != -1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)data);</span></span><br><span class="line"><span class="comment">//            data = fr.read();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：语法上针对于方式一的修改</span></span><br><span class="line">            <span class="keyword">int</span> data;</span><br><span class="line">            <span class="keyword">while</span>((data = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.流的关闭操作</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                if(fr != null)</span></span><br><span class="line"><span class="comment">//                    fr.close();</span></span><br><span class="line"><span class="comment">//            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//或</span></span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="字符流读取文本文件-升级版"><a href="#字符流读取文本文件-升级版" class="headerlink" title="字符流读取文本文件(升级版)"></a>字符流读取文本文件(升级版)</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader1</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.File类的实例化</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.FileReader流的实例化</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读入的操作</span></span><br><span class="line">            <span class="comment">//read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//方式一：</span></span><br><span class="line">                <span class="comment">//错误的写法</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; cbuf.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//正确的写法</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; len;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//方式二：</span></span><br><span class="line">                <span class="comment">//错误的写法,对应着方式一的错误的写法</span></span><br><span class="line"><span class="comment">//                String str = new String(cbuf);</span></span><br><span class="line"><span class="comment">//                System.out.print(str);</span></span><br><span class="line">                <span class="comment">//正确的写法</span></span><br><span class="line">                String str = <span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//4.资源的关闭</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    从内存中写出数据到硬盘的文件里。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    说明：</span></span><br><span class="line"><span class="comment">1. 输出操作，对应的File可以不存在的。并不会报异常</span></span><br><span class="line"><span class="comment">2.File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。</span></span><br><span class="line"><span class="comment">  File对应的硬盘中的文件如果存在：</span></span><br><span class="line"><span class="comment">如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原有文件的覆盖</span></span><br><span class="line"><span class="comment">如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容</span></span><br><span class="line"><span class="comment">  fw = new FileWriter(file,false);</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="文本文件的复制"><a href="#文本文件的复制" class="headerlink" title="文本文件的复制"></a>文本文件的复制</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> public void testFileReaderFileWriter() &#123;</span><br><span class="line">        FileReader fr &#x3D; null;</span><br><span class="line">        FileWriter fw &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;1.创建File类的对象，指明读入和写出的文件</span><br><span class="line">            File srcFile &#x3D; new File(&quot;hello.txt&quot;);</span><br><span class="line">            File destFile &#x3D; new File(&quot;hello2.txt&quot;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;2.创建输入流和输出流的对象</span><br><span class="line">            fr &#x3D; new FileReader(srcFile);</span><br><span class="line">            fw &#x3D; new FileWriter(destFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;3.数据的读入和写出操作</span><br><span class="line">            char[] cbuf &#x3D; new char[5];</span><br><span class="line">            int len;&#x2F;&#x2F;记录每次读入到cbuf数组中的字符的个数</span><br><span class="line">            while((len &#x3D; fr.read(cbuf)) !&#x3D; -1)&#123;</span><br><span class="line">                &#x2F;&#x2F;每次写出len个字符</span><br><span class="line">                fw.write(cbuf,0,len);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            &#x2F;&#x2F;4.关闭流资源</span><br><span class="line">            &#x2F;&#x2F;方式一：</span><br><span class="line">&#x2F;&#x2F;            try &#123;</span><br><span class="line">&#x2F;&#x2F;                if(fw !&#x3D; null)</span><br><span class="line">&#x2F;&#x2F;                    fw.close();</span><br><span class="line">&#x2F;&#x2F;            &#125; catch (IOException e) &#123;</span><br><span class="line">&#x2F;&#x2F;                e.printStackTrace();</span><br><span class="line">&#x2F;&#x2F;            &#125;finally&#123;</span><br><span class="line">&#x2F;&#x2F;                try &#123;</span><br><span class="line">&#x2F;&#x2F;                    if(fr !&#x3D; null)</span><br><span class="line">&#x2F;&#x2F;                        fr.close();</span><br><span class="line">&#x2F;&#x2F;                &#125; catch (IOException e) &#123;</span><br><span class="line">&#x2F;&#x2F;                    e.printStackTrace();</span><br><span class="line">&#x2F;&#x2F;                &#125;</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">            &#x2F;&#x2F;方式二：</span><br><span class="line">            try &#123;</span><br><span class="line">                if(fw !&#x3D; null)</span><br><span class="line">                    fw.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                if(fr !&#x3D; null)</span><br><span class="line">                    fr.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="指定路径复制图片"><a href="#指定路径复制图片" class="headerlink" title="指定路径复制图片"></a>指定路径复制图片</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定路径下文件的复制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//复制的过程</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        String srcPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\01-视频.avi&quot;</span>;</span><br><span class="line">        String destPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\02-视频.avi&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String srcPath = &quot;hello.txt&quot;;</span></span><br><span class="line"><span class="comment">//        String destPath = &quot;hello3.txt&quot;;</span></span><br><span class="line"></span><br><span class="line">        copyFile(srcPath,destPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;复制操作花费的时间为：&quot;</span> + (end - start));<span class="comment">//618</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>1.缓冲流：  </p><ul><li>BufferedInputStream  </li><li>BufferedOutputStream  </li><li>BufferedReader  </li><li>BufferedWriter  </li></ul><h3 id="缓冲流复制文本文件-字符流"><a href="#缓冲流复制文本文件-字符流" class="headerlink" title="缓冲流复制文本文件(字符流)"></a>缓冲流复制文本文件(字符流)</h3><pre><code>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBufferedReaderBufferedWriter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建文件和相应的流</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">&quot;dbcp.txt&quot;</span>)));</span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">&quot;dbcp1.txt&quot;</span>)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读写操作</span></span><br><span class="line">            <span class="comment">//方式一：使用char[]数组</span></span><br><span class="line"><span class="comment">//            char[] cbuf = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while((len = br.read(cbuf)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//                bw.write(cbuf,0,len);</span></span><br><span class="line"><span class="comment">//    //            bw.flush();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：使用String</span></span><br><span class="line">            String data;</span><br><span class="line">            <span class="keyword">while</span>((data = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//方法一：</span></span><br><span class="line"><span class="comment">//                bw.write(data + &quot;\n&quot;);//data中不包含换行符</span></span><br><span class="line">                <span class="comment">//方法二：</span></span><br><span class="line">                bw.write(data);<span class="comment">//data中不包含换行符</span></span><br><span class="line">                bw.newLine();<span class="comment">//提供换行的操作</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="实现文件的复制-复制在一个路径下，字节流"><a href="#实现文件的复制-复制在一个路径下，字节流" class="headerlink" title="实现文件的复制(复制在一个路径下，字节流)"></a>实现文件的复制(复制在一个路径下，字节流)</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现文件复制的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileWithBuffered</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1 造节点流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream((srcFile));</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制的细节：读取、写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">if</span>(bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyFileWithBuffered</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        String srcPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\01-视频.avi&quot;</span>;</span><br><span class="line">        String destPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\03-视频.avi&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        copyFileWithBuffered(srcPath,destPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;复制操作花费的时间为：&quot;</span> + (end - start));<span class="comment">//618 - 176</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="转换流的使用"><a href="#转换流的使用" class="headerlink" title="转换流的使用"></a>转换流的使用</h2><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><p>1.转换流：属于字符流<br>  InputStreamReader：将一个字节的输入流转换为字符的输入流<br>  OutputStreamWriter：将一个字符的输出流转换为字节的输出流</p><p>2.作用：提供字节流与字符流之间的转换<br>3.解码：字节、字节数组  —&gt;字符数组、字符串<br>  编码：字符数组、字符串 —&gt; 字节、字节数组<br>4.字符集<br>ASCII：美国标准信息交换码。<br>用一个字节的7位可以表示。<br>ISO8859-1：拉丁码表。欧洲码表 用一个字节的8位表示。<br>GB2312：中国的中文编码表。最多两个字节编码所有字符<br>GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码<br>Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。<br>UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。  </p><h1 id="utf-8转换成gbk"><a href="#utf-8转换成gbk" class="headerlink" title="utf-8转换成gbk"></a>utf-8转换成gbk</h1><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void test2() throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F;1.造文件、造流</span><br><span class="line">        File file1 &#x3D; new File(&quot;dbcp.txt&quot;);</span><br><span class="line">        File file2 &#x3D; new File(&quot;dbcp_gbk.txt&quot;);</span><br><span class="line"></span><br><span class="line">        FileInputStream fis &#x3D; new FileInputStream(file1);</span><br><span class="line">        FileOutputStream fos &#x3D; new FileOutputStream(file2);</span><br><span class="line"></span><br><span class="line">        InputStreamReader isr &#x3D; new InputStreamReader(fis,&quot;utf-8&quot;);</span><br><span class="line">        OutputStreamWriter osw &#x3D; new OutputStreamWriter(fos,&quot;gbk&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.读写过程</span><br><span class="line">        char[] cbuf &#x3D; new char[20];</span><br><span class="line">        int len;</span><br><span class="line">        while((len &#x3D; isr.read(cbuf)) !&#x3D; -1)&#123;</span><br><span class="line">            osw.write(cbuf,0,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;3.关闭资源</span><br><span class="line">        isr.close();</span><br><span class="line">        osw.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class InputStreamReaderTest &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">    此时处理异常的话，仍然应该使用try-catch-finally</span><br><span class="line">    InputStreamReader的使用，实现字节的输入流到字符的输入流的转换</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void test1() throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis &#x3D; new FileInputStream(&quot;dbcp.txt&quot;);</span><br><span class="line">&#x2F;&#x2F;        InputStreamReader isr &#x3D; new InputStreamReader(fis);&#x2F;&#x2F;使用系统默认的字符集</span><br><span class="line">        &#x2F;&#x2F;参数2指明了字符集，具体使用哪个字符集，取决于文件dbcp.txt保存时使用的字符集</span><br><span class="line">        InputStreamReader isr &#x3D; new InputStreamReader(fis,&quot;UTF-8&quot;);&#x2F;&#x2F;使用系统默认的字符集</span><br><span class="line"></span><br><span class="line">        char[] cbuf &#x3D; new char[20];</span><br><span class="line">        int len;</span><br><span class="line">        while((len &#x3D; isr.read(cbuf)) !&#x3D; -1)&#123;</span><br><span class="line">            String str &#x3D; new String(cbuf,0,len);</span><br><span class="line">            System.out.print(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isr.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用类_基础</title>
      <link href="2020/10/21/%E5%B8%B8%E7%94%A8%E7%B1%BB_%E5%9F%BA%E7%A1%80/"/>
      <url>2020/10/21/%E5%B8%B8%E7%94%A8%E7%B1%BB_%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1603108626262&di=971a08ed7ce6dadf57d7cce07a3e5e05&imgtype=0&src=http://s7.51cto.com/wyfs02/M01/73/3F/wKioL1X4zfyRH-yTAABu41grSmY047.jpg" alt="avatar"></p><h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><p><strong>String类</strong>：代表字符串，java程序中所有的字符串字面值（如“abc”）都作为此类的实例实现。String是一个final类，代表不可变序列<br>源码：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public final class String</span><br><span class="line">    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    &#x2F;** The value is used for character storage. *&#x2F;</span><br><span class="line">    private final char value[];</span><br><span class="line"></span><br><span class="line">    &#x2F;** Cache the hash code for the string *&#x2F;</span><br><span class="line">    private int hash; &#x2F;&#x2F; Default to 0</span><br><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">![string.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;10&#x2F;22&#x2F;pgmIxRirzBkAYqT.png)</span><br><span class="line">String stri&#x3D;&quot;abc&quot;与 String str2&#x3D;new String(&quot;abc&quot;)的区别</span><br><span class="line"></span><br><span class="line">![string2.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;10&#x2F;22&#x2F;DQApK56luVkvZTF.png)</span><br><span class="line"></span><br><span class="line">![string3.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;10&#x2F;22&#x2F;T7Kna1UuDXqfko6.png)</span><br><span class="line"></span><br><span class="line">![String4.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;10&#x2F;22&#x2F;c3evpKsWG7hVaYO.png)</span><br><span class="line"></span><br><span class="line">**intern方法**将返回值放回到常量池中</span><br><span class="line"></span><br><span class="line">### 使用陷阱</span><br><span class="line">**String s1 &#x3D;&quot;a&quot;;**  </span><br><span class="line">说明:在字符串常量池中创建了一个字面量为&quot;a&quot;的字符串。  </span><br><span class="line">**s1 &#x3D;s1 +&quot;b&quot;**  </span><br><span class="line">说明:实际上原来的&quot;a&quot;字符串对象已经丢弃了,现在在堆空间中产生了一个字符串s1+&quot;b&quot; (也就是&quot;ab&quot;)。如果多次执行这些改变串内容的操作,会导致大量副本字符串对象存留在内存中,降低效率。如果这样的操作放到循环中,会极大影响程序的性能。  </span><br><span class="line">**String s2 &#x3D; &quot;ab&quot;**;  </span><br><span class="line">说明:直接在字符串常量池中创建一个字面量为&quot;ab&quot;的字符串。  </span><br><span class="line">**String s3 &#x3D;&quot;a&quot;+ &quot;b&quot;**;  </span><br><span class="line">说明: s3指向字符串常量池中已经创建的&quot;ab&quot;的字符串。  </span><br><span class="line">**String s4 &#x3D; s1.intern();**  </span><br><span class="line">说明:堆空间的s1对象在调用intern()之后,会将常量池中已经存在的&quot;ab&quot;字符串赋值给s4.</span><br><span class="line"></span><br><span class="line">### 常用方法</span><br><span class="line">![string5.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;10&#x2F;22&#x2F;ZJzDh7iweRuA3Kn.png)</span><br><span class="line">![string6.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;10&#x2F;22&#x2F;nOW7If543HlhPYU.png)</span><br><span class="line">![string8.png](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;10&#x2F;22&#x2F;iGQxJToUXhDC29g.png)</span><br><span class="line"></span><br><span class="line">### 面试题</span><br></pre></td></tr></table></figure> public void test4()&#123;        String s1 = &quot;javaEEhadoop&quot;;        String s2 = &quot;javaEE&quot;;        String s3 = s2 + &quot;hadoop&quot;;        System.out.println(s1 == s3);//false        final String s4 = &quot;javaEE&quot;;//s4:常量        String s5 = s4 + &quot;hadoop&quot;;        System.out.println(s1 == s5);//true    &#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### String跟byte[]之间的转换</span><br><span class="line"></span><br><span class="line">编码：String --&gt; byte[]:调用String的getBytes()</span><br><span class="line">解码：byte[] --&gt; String:调用String的构造器</span><br><span class="line"></span><br><span class="line">编码：字符串 --&gt;字节  (看得懂 ---&gt;看不懂的二进制数据)</span><br><span class="line">解码：编码的逆过程，字节 --&gt; 字符串 （看不懂的二进制数据 ---&gt; 看得懂）</span><br><span class="line">### String类型的一些转换</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class StringTest1 &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">    String 与 byte[]之间的转换</span><br><span class="line">    编码：String --&gt; byte[]:调用String的getBytes()</span><br><span class="line">    解码：byte[] --&gt; String:调用String的构造器</span><br><span class="line"></span><br><span class="line">    编码：字符串 --&gt;字节  (看得懂 ---&gt;看不懂的二进制数据)</span><br><span class="line">    解码：编码的逆过程，字节 --&gt; 字符串 （看不懂的二进制数据 ---&gt; 看得懂）</span><br><span class="line"></span><br><span class="line">    说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void test3() throws UnsupportedEncodingException &#123;</span><br><span class="line">        String str1 &#x3D; &quot;abc123中国&quot;;</span><br><span class="line">        byte[] bytes &#x3D; str1.getBytes();&#x2F;&#x2F;使用默认的字符集，进行编码。</span><br><span class="line">        System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line">        byte[] gbks &#x3D; str1.getBytes(&quot;gbk&quot;);&#x2F;&#x2F;使用gbk字符集进行编码。</span><br><span class="line">        System.out.println(Arrays.toString(gbks));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;******************&quot;);</span><br><span class="line"></span><br><span class="line">        String str2 &#x3D; new String(bytes);&#x2F;&#x2F;使用默认的字符集，进行解码。</span><br><span class="line">        System.out.println(str2);</span><br><span class="line"></span><br><span class="line">        String str3 &#x3D; new String(gbks);</span><br><span class="line">        System.out.println(str3);&#x2F;&#x2F;出现乱码。原因：编码集和解码集不一致！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String str4 &#x3D; new String(gbks, &quot;gbk&quot;);</span><br><span class="line">        System.out.println(str4);&#x2F;&#x2F;没有出现乱码。原因：编码集和解码集一致！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">    String 与 char[]之间的转换</span><br><span class="line"></span><br><span class="line">    String --&gt; char[]:调用String的toCharArray()</span><br><span class="line">    char[] --&gt; String:调用String的构造器</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void test2()&#123;</span><br><span class="line">        String str1 &#x3D; &quot;abc123&quot;;  &#x2F;&#x2F;题目： a21cb3</span><br><span class="line"></span><br><span class="line">        char[] charArray &#x3D; str1.toCharArray();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; charArray.length; i++) &#123;</span><br><span class="line">            System.out.println(charArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        char[] arr &#x3D; new char[]&#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&#125;;</span><br><span class="line">        String str2 &#x3D; new String(arr);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">    复习：</span><br><span class="line">    String 与基本数据类型、包装类之间的转换。</span><br><span class="line"></span><br><span class="line">    String --&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)</span><br><span class="line">    基本数据类型、包装类 --&gt; String:调用String重载的valueOf(xxx)</span><br><span class="line"></span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void test1()&#123;</span><br><span class="line">        String str1 &#x3D; &quot;123&quot;;</span><br><span class="line">&#x2F;&#x2F;        int num &#x3D; (int)str1;&#x2F;&#x2F;错误的</span><br><span class="line">        int num &#x3D; Integer.parseInt(str1);</span><br><span class="line"></span><br><span class="line">        String str2 &#x3D; String.valueOf(num);&#x2F;&#x2F;&quot;123&quot;</span><br><span class="line">        String str3 &#x3D; num + &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        System.out.println(str1 &#x3D;&#x3D; str3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h3 id="String-matches"><a href="#String-matches" class="headerlink" title="String matches"></a>String matches</h3><p><img src="https://i.loli.net/2020/10/26/rTCGp7HugRkOmyt.png" alt="1603715011_1_.png"></p><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><h3 id="StringBuffer方法"><a href="#StringBuffer方法" class="headerlink" title="StringBuffer方法"></a>StringBuffer方法</h3><p><img src="https://i.loli.net/2020/10/26/O8cJwvFSqjxAN5I.png" alt="1603718591_1_.png"></p><h3 id="String、StringBuffer、StringBuilder三者的异同"><a href="#String、StringBuffer、StringBuilder三者的异同" class="headerlink" title="String、StringBuffer、StringBuilder三者的异同"></a>String、StringBuffer、StringBuilder三者的异同</h3><p> String:不可变的字符序列；底层使用char[]存储<br> StringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储<br> StringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储  </p><h4 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h4><pre><code>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String();<span class="comment">//char[] value = new char[0];</span></span><br><span class="line">   String str1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[]&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span></span><br><span class="line"></span><br><span class="line">   StringBuffer sb1 = <span class="keyword">new</span> StringBuffer();<span class="comment">//char[] value = new char[16];底层创建了一个长度是16的数组。</span></span><br><span class="line">   System.out.println(sb1.length());<span class="comment">//</span></span><br><span class="line">   sb1.append(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//value[0] = &#x27;a&#x27;;</span></span><br><span class="line">   sb1.append(<span class="string">&#x27;b&#x27;</span>);<span class="comment">//value[1] = &#x27;b&#x27;;</span></span><br><span class="line"></span><br><span class="line">   StringBuffer sb2 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[&quot;abc&quot;.length() + 16];</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//问题1. System.out.println(sb2.length());//3</span></span><br><span class="line">   <span class="comment">//问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。</span></span><br><span class="line">            默认情况下，扩容为原来容量的<span class="number">2</span>倍 + <span class="number">2</span>，同时将原有数组中的元素复制到新的数组中。</span><br><span class="line"></span><br><span class="line">           指导意义：开发中建议大家使用：StringBuffer(<span class="keyword">int</span> capacity) 或 StringBuilder(<span class="keyword">int</span> capacity)</span><br></pre></td></tr></table></figure></code></pre><h2 id="JDK8之前的时间API"><a href="#JDK8之前的时间API" class="headerlink" title="JDK8之前的时间API"></a>JDK8之前的时间API</h2><p><img src="https://i.loli.net/2020/10/27/TpIQ5v6NDxHS2B8.png" alt="@VA8M7UE_YTB6B0_I_94O06.png"></p><h3 id="java-lang-System类"><a href="#java-lang-System类" class="headerlink" title="java.lang.System类"></a>java.lang.System类</h3><p>System类提供的public static long currentTimeMillis()用来返回当前时<br>间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。<br><strong> 此方法适于计算时间差。</strong></p><h3 id="java-util-Date类"><a href="#java-util-Date类" class="headerlink" title="java.util.Date类"></a>java.util.Date类</h3><p>表示特定的瞬间，精确到毫秒<br>**getTime():**返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象<br>表示的毫秒数。<br>**toString():**把此 Date 对象转换为以下形式的 String： dow mon dd<br>hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue,<br>Wed, Thu, Fri, Sat)， zzz是时间标准。  </p><p>1.两个构造器的使用</p><blockquote><p>构造器一：Date()：创建一个对应当前时间的Date对象<br>构造器二：创建指定毫秒数的Date对象  </p></blockquote><p>2.两个方法的使用</p><blockquote><p>toString():显示当前的年、月、日、时、分、秒<br>getTime():获取当前Date对象对应的毫秒数。（时间戳）  </p></blockquote><p>3.java.sql.Date对应着数据库中的日期类型的变量</p><blockquote><p>如何实例化<br>如何将java.util.Date对象转换为java.sql.Date对象</p></blockquote><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造器一：Date()：创建一个对应当前时间的Date对象</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date1.toString());<span class="comment">//Sat Feb 16 16:35:31 GMT+08:00 2019</span></span><br><span class="line"></span><br><span class="line">        System.out.println(date1.getTime());<span class="comment">//1550306204104</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">155030620410L</span>);</span><br><span class="line">        System.out.println(date2.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建java.sql.Date对象</span></span><br><span class="line">        java.sql.Date date3 = <span class="keyword">new</span> java.sql.Date(<span class="number">35235325345L</span>);</span><br><span class="line">        System.out.println(date3);<span class="comment">//1971-02-13</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line">        <span class="comment">//情况一：</span></span><br><span class="line"><span class="comment">//        Date date4 = new java.sql.Date(2343243242323L);</span></span><br><span class="line"><span class="comment">//        java.sql.Date date5 = (java.sql.Date) date4;</span></span><br><span class="line">        <span class="comment">//情况二：</span></span><br><span class="line">        Date date6 = <span class="keyword">new</span> Date();</span><br><span class="line">        java.sql.Date date7 = <span class="keyword">new</span> java.sql.Date(date6.getTime());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.System类中的currentTimeMillis()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</span></span><br><span class="line">        <span class="comment">//称为时间戳</span></span><br><span class="line">        System.out.println(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="日期和字符串相互转换"><a href="#日期和字符串相互转换" class="headerlink" title="日期和字符串相互转换"></a>日期和字符串相互转换</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//格式化：日期 ---&gt;字符串</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        String format = sdf.format(date);</span><br><span class="line">        System.out.println(format);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析：格式化的逆过程，字符串 ---&gt; 日期</span></span><br><span class="line">        String str = <span class="string">&quot;19-12-18 上午11:43&quot;</span>;</span><br><span class="line">        Date date1 = sdf.parse(str);</span><br><span class="line">        System.out.println(date1);</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>      //*************按照指定的方式格式化和解析：调用带参的构造器*****************    //        SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyyy.MMMMM.dd GGG hh:mm aaa&quot;);            SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);            //格式化            String format1 = sdf1.format(date);            System.out.println(format1);//2019-02-18 11:48:27            //解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),            //否则，抛异常            Date date2 = sdf1.parse(&quot;2020-02-18 11:48:27&quot;);            System.out.println(date2);    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 字符串&quot;2020-09-08&quot;转换为java.sql.Date</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">    public void testExer() throws ParseException &#123;</span><br><span class="line">        String birth &#x3D; &quot;2020-09-08&quot;;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat sdf1 &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">        Date date &#x3D; sdf1.parse(birth);</span><br><span class="line">&#x2F;&#x2F;        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        java.sql.Date birthDate &#x3D; new java.sql.Date(date.getTime());</span><br><span class="line">        System.out.println(birthDate);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="java-util-Calendar-日历-类"><a href="#java-util-Calendar-日历-类" class="headerlink" title="java.util.Calendar(日历)类"></a>java.util.Calendar(日历)类</h3><p>Calendar类是一个抽象类，不能实例化</p><p>获取Calendar实例的方法<br> 使用Calendar.getInstance()方法<br> 调用它的子类GregorianCalendar的构造器。<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Calendar calendar &#x3D; Calendar.getInstance();</span><br></pre></td></tr></table></figure></p><h4 id="get操作"><a href="#get操作" class="headerlink" title="get操作"></a>get操作</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;get()</span><br><span class="line">int days &#x3D; calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">System.out.println(days);</span><br><span class="line">System.out.println(calendar.get(Calendar.DAY_OF_YEAR));</span><br></pre></td></tr></table></figure></code></pre><h4 id="set操作"><a href="#set操作" class="headerlink" title="set操作"></a>set操作</h4><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set()</span></span><br><span class="line">      <span class="comment">//calendar可变性</span></span><br><span class="line">      calendar.set(Calendar.DAY_OF_MONTH,<span class="number">22</span>);</span><br><span class="line">      days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">      System.out.println(days);</span><br></pre></td></tr></table></figure></code></pre><h4 id="add操作"><a href="#add操作" class="headerlink" title="add操作"></a>add操作</h4><pre><code>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">calendar.add(Calendar.DAY_OF_MONTH,-<span class="number">3</span>);</span><br><span class="line">days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">System.out.println(days);</span><br></pre></td></tr></table></figure></code></pre><h4 id="getTime-操作"><a href="#getTime-操作" class="headerlink" title="getTime()操作"></a>getTime()操作</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;getTime():日历类---&gt; Date</span><br><span class="line">        Date date &#x3D; calendar.getTime();</span><br><span class="line">        System.out.println(date);</span><br></pre></td></tr></table></figure></code></pre><h4 id="setTime-操作"><a href="#setTime-操作" class="headerlink" title="setTime()操作"></a>setTime()操作</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Date date1 &#x3D; new Date();</span><br><span class="line">      calendar.setTime(date1);</span><br><span class="line">      days &#x3D; calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">      System.out.println(days);</span><br></pre></td></tr></table></figure></code></pre><p><img src="https://i.loli.net/2020/10/27/SxCJUDWay2nGZVz.png" alt="1603789213_1_.png"></p><h2 id="JDK8中出现的新的类"><a href="#JDK8中出现的新的类" class="headerlink" title="JDK8中出现的新的类"></a>JDK8中出现的新的类</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void test1()&#123;</span><br><span class="line">        &#x2F;&#x2F;now():获取当前的日期、时间、日期+时间</span><br><span class="line">        LocalDate localDate &#x3D; LocalDate.now();</span><br><span class="line">        LocalTime localTime &#x3D; LocalTime.now();</span><br><span class="line">        LocalDateTime localDateTime &#x3D; LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">        System.out.println(localDate);</span><br><span class="line">        System.out.println(localTime);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;of():设置指定的年、月、日、时、分、秒。没有偏移量</span><br><span class="line">        LocalDateTime localDateTime1 &#x3D; LocalDateTime.of(2020, 10, 6, 13, 23, 43);</span><br><span class="line">        System.out.println(localDateTime1);</span><br></pre></td></tr></table></figure></code></pre><h3 id="LocalDate中的get方法"><a href="#LocalDate中的get方法" class="headerlink" title="LocalDate中的get方法"></a>LocalDate中的get方法</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void test1()&#123;</span><br><span class="line">       &#x2F;&#x2F;now():获取当前的日期、时间、日期+时间</span><br><span class="line">       LocalDate localDate &#x3D; LocalDate.now();</span><br><span class="line">       LocalTime localTime &#x3D; LocalTime.now();</span><br><span class="line">       LocalDateTime localDateTime &#x3D; LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">       System.out.println(localDate);</span><br><span class="line">       System.out.println(localTime);</span><br><span class="line">       System.out.println(localDateTime);</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F;of():设置指定的年、月、日、时、分、秒。没有偏移量</span><br><span class="line">       LocalDateTime localDateTime1 &#x3D; LocalDateTime.of(2020, 10, 6, 13, 23, 43);</span><br><span class="line">       System.out.println(localDateTime1);</span><br></pre></td></tr></table></figure></code></pre><h3 id="LocalDate中的with方法-设置相关属性"><a href="#LocalDate中的with方法-设置相关属性" class="headerlink" title="LocalDate中的with方法(设置相关属性)"></a>LocalDate中的with方法(设置相关属性)</h3><pre><code>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;withXxx():设置相关的属性</span><br><span class="line">       LocalDate localDate1 &#x3D; localDate.withDayOfMonth(22);</span><br><span class="line">       System.out.println(localDate);</span><br><span class="line">       System.out.println(localDate1);</span><br><span class="line">LocalDateTime localDateTime2 &#x3D; localDateTime.withHour(4);</span><br><span class="line">      System.out.println(localDateTime);</span><br><span class="line">      System.out.println(localDateTime2);</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;不可变性</span><br><span class="line">      LocalDateTime localDateTime3 &#x3D; localDateTime.plusMonths(3);</span><br><span class="line">      System.out.println(localDateTime);</span><br><span class="line">      System.out.println(localDateTime3);</span><br><span class="line"></span><br><span class="line">      LocalDateTime localDateTime4 &#x3D; localDateTime.minusDays(6);</span><br><span class="line">      System.out.println(localDateTime);</span><br><span class="line">      System.out.println(localDateTime4);</span><br></pre></td></tr></table></figure></code></pre><h2 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">  @Test</span><br><span class="line">    public void test2()&#123;</span><br><span class="line">        &#x2F;&#x2F;now():获取本初子午线对应的标准时间</span><br><span class="line">        Instant instant &#x3D; Instant.now();</span><br><span class="line">        System.out.println(instant);&#x2F;&#x2F;2019-02-18T07:29:41.719Z</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;添加时间的偏移量</span><br><span class="line">        OffsetDateTime offsetDateTime &#x3D; instant.atOffset(ZoneOffset.ofHours(8));</span><br><span class="line">        System.out.println(offsetDateTime);&#x2F;&#x2F;2019-02-18T15:32:50.611+08:00</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  ---&gt; Date类的getTime()</span><br><span class="line">        long milli &#x3D; instant.toEpochMilli();</span><br><span class="line">        System.out.println(milli);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;ofEpochMilli():通过给定的毫秒数，获取Instant实例  --&gt;Date(long millis)</span><br><span class="line">        Instant instant1 &#x3D; Instant.ofEpochMilli(1550475314878L);</span><br><span class="line">        System.out.println(instant1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">    DateTimeFormatter:格式化或解析日期、时间</span><br><span class="line">    类似于SimpleDateFormat</span><br><span class="line"></span><br><span class="line">     *&#x2F;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test3()&#123;</span><br><span class="line">&#x2F;&#x2F;        方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span><br><span class="line">        DateTimeFormatter formatter &#x3D; DateTimeFormatter.ISO_LOCAL_DATE_TIME;</span><br><span class="line">        &#x2F;&#x2F;格式化:日期--&gt;字符串</span><br><span class="line">        LocalDateTime localDateTime &#x3D; LocalDateTime.now();</span><br><span class="line">        String str1 &#x3D; formatter.format(localDateTime);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        System.out.println(str1);&#x2F;&#x2F;2019-02-18T15:42:18.797</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;解析：字符串 --&gt;日期</span><br><span class="line">        TemporalAccessor parse &#x3D; formatter.parse(&quot;2019-02-18T15:42:18.797&quot;);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        方式二：</span><br><span class="line">&#x2F;&#x2F;        本地化相关的格式。如：ofLocalizedDateTime()</span><br><span class="line">&#x2F;&#x2F;        FormatStyle.LONG &#x2F; FormatStyle.MEDIUM &#x2F; FormatStyle.SHORT :适用于LocalDateTime</span><br><span class="line">        DateTimeFormatter formatter1 &#x3D; DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);</span><br><span class="line">        &#x2F;&#x2F;格式化</span><br><span class="line">        String str2 &#x3D; formatter1.format(localDateTime);</span><br><span class="line">        System.out.println(str2);&#x2F;&#x2F;2019年2月18日 下午03时47分16秒</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;      本地化相关的格式。如：ofLocalizedDate()</span><br><span class="line">&#x2F;&#x2F;      FormatStyle.FULL &#x2F; FormatStyle.LONG &#x2F; FormatStyle.MEDIUM &#x2F; FormatStyle.SHORT : 适用于LocalDate</span><br><span class="line">        DateTimeFormatter formatter2 &#x3D; DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);</span><br><span class="line">        &#x2F;&#x2F;格式化</span><br><span class="line">        String str3 &#x3D; formatter2.format(LocalDate.now());</span><br><span class="line">        System.out.println(str3);&#x2F;&#x2F;2019-2-18</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;       重点： 方式三：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</span><br><span class="line">        DateTimeFormatter formatter3 &#x3D; DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd hh:mm:ss&quot;);</span><br><span class="line">        &#x2F;&#x2F;格式化</span><br><span class="line">        String str4 &#x3D; formatter3.format(LocalDateTime.now());</span><br><span class="line">        System.out.println(str4);&#x2F;&#x2F;2019-02-18 03:52:09</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;解析</span><br><span class="line">        TemporalAccessor accessor &#x3D; formatter3.parse(&quot;2019-02-18 03:52:09&quot;);</span><br><span class="line">        System.out.println(accessor);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h2 id="java比较器"><a href="#java比较器" class="headerlink" title="java比较器"></a>java比较器</h2><p>Java实现对象排序的方式有两种：</p><p> 自然排序： java.lang.Comparable  </p><p> 定制排序： java.util.Comparator</p><h3 id="方式一：自然排序：-java-lang-Comparable"><a href="#方式一：自然排序：-java-lang-Comparable" class="headerlink" title="方式一：自然排序： java.lang.Comparable"></a>方式一：自然排序： java.lang.Comparable</h3><p>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称<br>为类的自然排序。<br> 实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过 compareTo(Object obj) 方法的返回值来比较大小。 如果当前对象this大于形参对象obj， 则返回正整数，如果当前对象this小于形参对象obj， 则返回负整数，如果当前对象this等于形参对象obj， 则返回零。   </p><p> 实现Comparable接口的对象列表（和数组）可以通过 Collections.sort 或<br>Arrays.sort进行自动排序。实现此接口的对象可以用作有序映射中的键或有<br>序集合中的元素，无需指定比较器。</p><p> 对于类 C 的每一个e1和e2来说，当且仅当 e1.compareTo(e2) == 0 与e1.equals(e2) 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals一致。 建议（虽然不是必需的） 最好使自然排序与equals一致。  </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程_基础</title>
      <link href="2020/10/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B_%E5%9F%BA%E7%A1%80/"/>
      <url>2020/10/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B_%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1603108626262&di=971a08ed7ce6dadf57d7cce07a3e5e05&imgtype=0&src=http://s7.51cto.com/wyfs02/M01/73/3F/wKioL1X4zfyRH-yTAABu41grSmY047.jpg" alt="avatar"></p><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>程序</strong>：是为完成特定任务、某种语言编写的一组指令的集合。即指一段<em>静态的代码</em>，静态对象。<br><strong>进程</strong>：是程序的一次执行过程。或者正在运行的一个程序。是一个动态过程：有他自身产生、存在、消亡的过程。<br><strong>线程</strong>：程序内部的一条执行路径。线程是程序执行的一条路径, 一个进程中可以包含多条线程。多线程并发执行可以提高程序的效率, 可以同时完成多项工作。</p><p><strong>并行</strong>：多个cpu同时执行多个任务。比如多个人做不同的事情。<br><strong>并发</strong>：一个cpu（采用时间片）同时执行多个任务。比如：秒杀、多个人同时做一件事情。</p><p><strong>守护线程</strong>用来服务于用户线程；不需要上层逻辑介入。当线程只剩下守护线程的时候,JVM就会退出；补充一点如果还有其他的任意一个用户线程还在，JVM就不会退出。  java垃圾回收就是一种典型的守护线程。  </p><p>守护线程是用来服务用户线程的，通过在start()方法前调用  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread.setDaemon(true)  </span><br></pre></td></tr></table></figure><p>可以把一个用户线程变成一个守护线程。  </p><p><strong>用户线程</strong>：我们平常创建的普通线程。</p><h2 id="线程的创建和使用"><a href="#线程的创建和使用" class="headerlink" title="线程的创建和使用"></a>线程的创建和使用</h2><h3 id="方式一：继承于Thread类"><a href="#方式一：继承于Thread类" class="headerlink" title="方式一：继承于Thread类"></a>方式一：继承于Thread类</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多线程的创建，方式一：继承于Thread类</span></span><br><span class="line"><span class="comment"> * 1. 创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="comment"> * 2. 重写Thread类的run() --&gt; 将此线程执行的操作声明在run()中</span></span><br><span class="line"><span class="comment"> * 3. 创建Thread类的子类的对象</span></span><br><span class="line"><span class="comment"> * 4. 通过此对象调用start()</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 例子：遍历100以内的所有的偶数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> vankood</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vankood_01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建Thread类的子类的对象</span></span><br><span class="line">        MyThread m1=<span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//4. 通过此对象调用start()</span></span><br><span class="line">        m1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. 创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//2. 重写Thread类的run() --&gt; 将此线程执行的操作声明在run()中</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;分线程&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习：创建两个分线程，其中一个线程遍历100以内的偶数，另一个线程遍历100以内的奇数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-02-13 下午 2:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mythread1 m1=<span class="keyword">new</span> Mythread1();</span><br><span class="line">        Mythread2 m2=<span class="keyword">new</span> Mythread2();</span><br><span class="line">        m1.start();</span><br><span class="line">        m2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h4 id="匿名子类方式创建线程"><a href="#匿名子类方式创建线程" class="headerlink" title="匿名子类方式创建线程"></a>匿名子类方式创建线程</h4><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_03</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="string">&quot;线程一&quot;</span>) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">                   <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                   System.out.println(<span class="keyword">this</span>.getName()+<span class="string">&quot;&quot;</span>+i);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="string">&quot;线程二&quot;</span>) &#123;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">                   <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                       System.out.println(<span class="keyword">this</span>.getName()+<span class="string">&quot;&quot;</span>+i);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;.start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h3 id="方式二：实现Runnable接口"><a href="#方式二：实现Runnable接口" class="headerlink" title="方式二：实现Runnable接口"></a>方式二：实现Runnable接口</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 创建多线程的方式二：实现Runnable接口</span></span><br><span class="line"><span class="comment">        * 1. 创建一个实现了Runnable接口的类</span></span><br><span class="line"><span class="comment">        * 2. 实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line"><span class="comment">        * 3. 创建实现类的对象</span></span><br><span class="line"><span class="comment">        * 4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line"><span class="comment">        * 5. 通过Thread类的对象调用start()</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 比较创建线程的两种方式。</span></span><br><span class="line"><span class="comment">        * 开发中：优先选择：实现Runnable接口的方式</span></span><br><span class="line"><span class="comment">        * 原因：1. 实现的方式没有类的单继承性的局限性</span></span><br><span class="line"><span class="comment">        *      2. 实现的方式更适合来处理多个线程有共享数据的情况。</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 联系：public class Thread implements Runnable</span></span><br><span class="line"><span class="comment"> * 相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@create</span> 2019-02-13 下午 4:34</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="comment">// 1. 创建一个实现了Runnable接口的类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 2. 实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">vankood_04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mythread mt=<span class="keyword">new</span> Mythread();</span><br><span class="line">        <span class="comment">//3. 创建实现类的对象</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(mt);</span><br><span class="line">        <span class="comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line">        t1.setName(<span class="string">&quot;线程一&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Mythread mt2=<span class="keyword">new</span> Mythread();</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(mt2);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程二&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//5. 通过Thread类的对象调用start()</span></span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h3 id="方式三：实现Callable接口"><a href="#方式三：实现Callable接口" class="headerlink" title="方式三：实现Callable接口"></a>方式三：实现Callable接口</h3><p>创建线程的方式三：实现Callable接口。 — JDK 5.0新增</p><p> 如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</p><ol><li>call()可以有返回值的。</li><li>call()可以抛出异常，被外面的操作捕获，获取异常的信息</li><li>Callable是支持泛型的   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line"><span class="comment">//1.创建一个实现Callable的实现类  </span></span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadNew &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;3.创建Callable接口实现类的对象</span><br><span class="line">        NumThread numThread &#x3D; new NumThread();</span><br><span class="line">        &#x2F;&#x2F;4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span><br><span class="line">        FutureTask futureTask &#x3D; new FutureTask(numThread);</span><br><span class="line">        &#x2F;&#x2F;5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span><br><span class="line">        new Thread(futureTask).start();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;6.获取Callable中call方法的返回值</span><br><span class="line">            &#x2F;&#x2F;get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span><br><span class="line">            Object sum &#x3D; futureTask.get();</span><br><span class="line">            System.out.println(&quot;总和为：&quot; + sum);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="方式四：使用线程池"><a href="#方式四：使用线程池" class="headerlink" title="方式四：使用线程池"></a>方式四：使用线程池</h3></li></ol><p><strong>背景</strong>： 经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，<br>对性能影响很大。<br>思路： 提前创建好多个线程，放入线程池中，使用时直接获取，使用完<br>放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交<br>通工具。<br><strong>好处</strong><br>提高响应速度（减少了创建新线程的时间）<br>降低资源消耗（重复利用线程池中线程，不需要每次都创建）<br>便于线程管理<br>corePoolSize：核心池的大小<br>maximumPoolSize：最大线程数<br>keepAliveTime：线程没有任务时最多保持多长时间后会终止  </p><h4 id="线程池相关API"><a href="#线程池相关API" class="headerlink" title="线程池相关API"></a>线程池相关API</h4><p> JDK 5.0起提供了线程池相关API： ExecutorService 和 Executors<br> ExecutorService：真正的线程池接口。常见子类ThreadPoolExecutor<br> void execute(Runnable command) ：执行任务/命令，没有返回值，一般用来执行Runnable<br> <T> Future<T> submit(Callable<T> task)：执行任务，有返回值，一般又来执行Callable<br> void shutdown() ：关闭连接池<br> Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池<br> Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池<br> Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池<br> Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池<br> Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行  </p><pre><code>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 提供指定线程数量的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;</span><br><span class="line">        <span class="comment">//设置线程池的属性</span></span><br><span class="line"><span class="comment">//        System.out.println(service.getClass());</span></span><br><span class="line"><span class="comment">//        service1.setCorePoolSize(15);</span></span><br><span class="line"><span class="comment">//        service1.setKeepAliveTime();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread());<span class="comment">//适合适用于Runnable</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread1());<span class="comment">//适合适用于Runnable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        service.submit(Callable callable);//适合使用于Callable</span></span><br><span class="line">        <span class="comment">//3.关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h3 id="两种方式的对比"><a href="#两种方式的对比" class="headerlink" title="两种方式的对比"></a>两种方式的对比</h3><p>比较创建线程的两种方式。<br> <strong>开发中</strong>：优先选择：实现Runnable接口的方式<br>** 原因： **  </p><ol><li>实现的方式没有类的单继承性的局限性  </li><li>实现的方式更适合来处理多个线程有共享数据的情况。  </li></ol><p>  <strong>联系：</strong><br>   public class Thread implements Runnable<br>  Thread类实现了Runnable接口。</p><p><strong>相同点：</strong><br>  两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。</p><h2 id="线程的常用方法"><a href="#线程的常用方法" class="headerlink" title="线程的常用方法"></a>线程的常用方法</h2><ul><li>测试Thread中的常用方法：<ol><li>start():启动当前线程；调用当前线程的run()</li><li>run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</li><li>currentThread():静态方法，返回执行当前代码的线程<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().getName()</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="4"><li>getName():获取当前线程的名字</li></ol></li><li><ol start="5"><li>setName():设置当前线程的名字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HelloThread h1 &#x3D; new HelloThread(&quot;线程一&quot;);</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="6"><li>yield():释放当前cpu的执行权</li></ol></li><li><ol start="7"><li>join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才</li></ol></li><li>结束阻塞状态。</li><li><ol start="8"><li>stop():已过时。当执行此方法时，强制结束当前线程。</li></ol></li><li><ol start="9"><li>sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前</li></ol></li><li>线程是阻塞状态。</li><li><ol start="10"><li>isAlive():判断当前线程是否存活</li></ol></li><li></li><li></li><li>线程的优先级：</li><li>1.</li><li>MAX_PRIORITY：10</li><li>MIN _PRIORITY：1</li><li>NORM_PRIORITY：5  –&gt;默认优先级</li><li>2.如何获取和设置当前线程的优先级：</li><li>getPriority():获取线程的优先级</li><li>setPriority(int p):设置线程的优先级</li><li></li><li>说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下</li><li>被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    sleep(10);</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + Thread.currentThread().getPriority() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(i % 20 == 0)&#123;</span></span><br><span class="line"><span class="comment">//                yield();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        HelloThread h1 = <span class="keyword">new</span> HelloThread(<span class="string">&quot;Thread：1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        h1.setName(&quot;线程一&quot;);</span></span><br><span class="line">        <span class="comment">//设置分线程的优先级</span></span><br><span class="line">        h1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"></span><br><span class="line">        h1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给主线程命名</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">        Thread.currentThread().setPriority(Thread.MIN_PRIORITY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + Thread.currentThread().getPriority() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(i == 20)&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    h1.join();</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(h1.isAlive());</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2>线程的生命周期包含5个阶段，包括：新建、就绪、运行、阻塞、销毁。 <img src="https://i.loli.net/2020/10/22/A9UDK6Xnx7kefZ3.png" alt="xiancheng1.png"></li><li>*新建**：就是刚使用new方法，new出来的线程；  </li><li>*就绪**：就是调用的线程的start()方法后，这时候线程处于等待CPU分配资源阶段，谁先抢的CPU资源，谁开始执行;  </li><li>*运行**：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run方法定义了线程的操作和功能;  </li><li>*阻塞**：在运行状态的时候，可能因为某些原因导致运行状态的线程变成了阻塞状态，比如sleep()、wait()之后线程就处于了阻塞状态，这个时候需要其他机制将处于阻塞状态的线程唤醒，比如调用notify或者notifyAll()方法。唤醒的线程不会立刻执行run方法，它们要再次等待CPU分配资源进入运行状态;  </li><li>*死亡**：如果线程正常执行完毕后或线程被提前强制性的终止或出现异常导致结束，那么线程就要被销毁，释放资源;<h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2>在Java中，我们通过同步机制，来解决线程的安全问题。  <h3 id="方式一：同步代码块"><a href="#方式一：同步代码块" class="headerlink" title="方式一：同步代码块"></a>方式一：同步代码块</h3><pre><code>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line"><span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">说明：  </span><br><span class="line"><span class="number">1.</span>操作共享数据的代码，即为需要被同步的代码。  --&gt;不能包含代码多了，也不能包含代码少了。  </span><br><span class="line"><span class="number">2.</span>共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。  </span><br><span class="line"><span class="number">3.</span>同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。</span><br><span class="line">要求：多个线程必须要共用同一把锁。</span><br><span class="line">补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用<span class="keyword">this</span>充当同步监视器。</span><br><span class="line">### 方式二：同步方法。</span><br><span class="line">如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="number">5.</span>同步的方式，解决了线程的安全问题。---好处  操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。 ---局限性  </span><br><span class="line"></span><br><span class="line">#### 实现Runnable接口的线程同步（同步代码块）</span><br><span class="line">```java  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//    Object obj = new Object();</span></span><br><span class="line"><span class="comment">//    Dog dog = new Dog();</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Object obj = new Object();</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;<span class="comment">//此时的this:唯一的Window1的对象   //方式二：synchronized (dog) &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window1 w = <span class="keyword">new</span> Window1();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h4 id="实现Runnable接口的线程同步（同步方法）"><a href="#实现Runnable接口的线程同步（同步方法）" class="headerlink" title="实现Runnable接口的线程同步（同步方法）"></a>实现Runnable接口的线程同步（同步方法）</h4><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用同步方法解决实现Runnable接口的线程安全问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  关于同步方法的总结：</span></span><br><span class="line"><span class="comment"> *  1. 同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</span></span><br><span class="line"><span class="comment"> *  2. 非静态的同步方法，同步监视器是：this</span></span><br><span class="line"><span class="comment"> *     静态的同步方法，同步监视器是：当前类本身</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="comment">//同步监视器：this</span></span><br><span class="line">        <span class="comment">//synchronized (this)&#123;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line"></span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window3 w = <span class="keyword">new</span> Window3();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h4 id="继承Thread类的线程同步-同步代码块"><a href="#继承Thread类的线程同步-同步代码块" class="headerlink" title="继承Thread类的线程同步(同步代码块)"></a>继承Thread类的线程同步(同步代码块)</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 使用同步代码块解决继承Thread类的方式的线程安全问题</span><br><span class="line"> *</span><br><span class="line"> * 例子：创建三个窗口卖票，总票数为100张.使用继承Thread类的方式</span><br><span class="line"> *</span><br><span class="line"> * 说明：在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。</span><br><span class="line"> *</span><br><span class="line"> * @author shkstart</span><br><span class="line"> * @create 2019-02-13 下午 4:20</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Window2 extends Thread&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static int ticket &#x3D; 100;</span><br><span class="line"></span><br><span class="line">    private static Object obj &#x3D; new Object();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line"></span><br><span class="line">        while(true)&#123;</span><br><span class="line">            &#x2F;&#x2F;正确的</span><br><span class="line">&#x2F;&#x2F;            synchronized (obj)&#123;</span><br><span class="line">            synchronized (Window2.class)&#123;&#x2F;&#x2F;Class clazz &#x3D; Window2.class,Window2.class只会加载一次</span><br><span class="line">                &#x2F;&#x2F;错误的方式：this代表着t1,t2,t3三个对象</span><br><span class="line">&#x2F;&#x2F;              synchronized (this)&#123;</span><br><span class="line"></span><br><span class="line">                if(ticket &gt; 0)&#123;</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(100);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(getName() + &quot;：卖票，票号为：&quot; + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class WindowTest2 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Window2 t1 &#x3D; new Window2();</span><br><span class="line">        Window2 t2 &#x3D; new Window2();</span><br><span class="line">        Window2 t3 &#x3D; new Window2();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.setName(&quot;窗口1&quot;);</span><br><span class="line">        t2.setName(&quot;窗口2&quot;);</span><br><span class="line">        t3.setName(&quot;窗口3&quot;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h4 id="继承Thread类的线程同步-同步方法"><a href="#继承Thread类的线程同步-同步方法" class="headerlink" title="继承Thread类的线程同步(同步方法)"></a>继承Thread类的线程同步(同步方法)</h4><pre><code>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用同步方法处理继承Thread类的方式中的线程安全问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window4</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="comment">//同步监视器：Window4.class</span></span><br><span class="line">        <span class="comment">//private synchronized void show()&#123; //同步监视器：t1,t2,t3。此种解决方式是错误的</span></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window4 t1 = <span class="keyword">new</span> Window4();</span><br><span class="line">        Window4 t2 = <span class="keyword">new</span> Window4();</span><br><span class="line">        Window4 t3 = <span class="keyword">new</span> Window4();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="方式三：Lock锁-—-JDK5-0新增"><a href="#方式三：Lock锁-—-JDK5-0新增" class="headerlink" title="方式三：Lock锁  — JDK5.0新增"></a>方式三：Lock锁  — JDK5.0新增</h3><p>  <strong>1.synchronized 与 Lock的异同？</strong><br><strong>相同</strong>：二者都可以解决线程安全问题<br><strong>不同</strong>：synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器Lock需要手动的启动同步（lock()），同时结束同步也需要手动的实现（unlock()）</p><p><strong>2.优先使用顺序：</strong><br> Lock 同步代码块（已经进入了方法体，分配了相应资源）  同步方法（在方法体之外）</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);<span class="comment">//true表示公平锁</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：售票，票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法：unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h2 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h2><h3 id="notify和notifyall"><a href="#notify和notifyall" class="headerlink" title="notify和notifyall"></a>notify和notifyall</h3><pre><code><figure class="highlight plain"><figcaption><span>com.atguigu.java2;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 线程通信的例子：使用两个线程打印 1-100。线程1, 线程2 交替打印</span><br><span class="line"> *</span><br><span class="line"> * 涉及到的三个方法：</span><br><span class="line"> * wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</span><br><span class="line"> * notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</span><br><span class="line"> * notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。</span><br><span class="line"> *</span><br><span class="line"> * 说明：</span><br><span class="line"> * 1.wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。</span><br><span class="line"> * 2.wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。</span><br><span class="line"> *    否则，会出现IllegalMonitorStateException异常</span><br><span class="line"> * 3.wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</span><br><span class="line"> *</span><br><span class="line"> * 面试题：sleep() 和 wait()的异同？</span><br><span class="line"> * 1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</span><br><span class="line"> * 2.不同点：1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</span><br><span class="line"> *          2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</span><br><span class="line"> *          3）关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。</span><br><span class="line"> *</span><br><span class="line"> * @author shkstart</span><br><span class="line"> * @create 2019-02-15 下午 4:21</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Number implements Runnable&#123;</span><br><span class="line">    private int number &#x3D; 1;</span><br><span class="line">    private Object obj &#x3D; new Object();</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line"></span><br><span class="line">        while(true)&#123;</span><br><span class="line"></span><br><span class="line">            synchronized (obj) &#123;</span><br><span class="line"></span><br><span class="line">                obj.notify();</span><br><span class="line"></span><br><span class="line">                if(number &lt;&#x3D; 100)&#123;</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(10);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + &quot;:&quot; + number);</span><br><span class="line">                    number++;</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line">                        &#x2F;&#x2F;使得调用如下wait()方法的线程进入阻塞状态</span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class CommunicationTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Number number &#x3D; new Number();</span><br><span class="line">        Thread t1 &#x3D; new Thread(number);</span><br><span class="line">        Thread t2 &#x3D; new Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(&quot;线程1&quot;);</span><br><span class="line">        t2.setName(&quot;线程2&quot;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h4 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll"></a>notifyAll</h4><h2 id="jdk5-0新增线程创建方式"><a href="#jdk5-0新增线程创建方式" class="headerlink" title="jdk5.0新增线程创建方式"></a>jdk5.0新增线程创建方式</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
